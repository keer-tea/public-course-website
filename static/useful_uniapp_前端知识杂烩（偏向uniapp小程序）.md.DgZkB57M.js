import{_ as s,l as i,k as a,ae as t}from"./chunks/framework.BFFW23Ds.js";const c=JSON.parse('{"title":"前端知识杂烩（偏向 uniapp 小程序）","description":"","frontmatter":{"label":"uniapp"},"headers":[],"relativePath":"useful/uniapp/前端知识杂烩（偏向uniapp小程序）.md","filePath":"useful/uniapp/前端知识杂烩（偏向uniapp小程序）.md","lastUpdated":1709816942000}'),e={name:"useful/uniapp/前端知识杂烩（偏向uniapp小程序）.md"},h=t(`<h1 id="前端知识杂烩-偏向-uniapp-小程序" tabindex="-1">前端知识杂烩（偏向 uniapp 小程序） <a class="header-anchor" href="#前端知识杂烩-偏向-uniapp-小程序" aria-label="Permalink to &quot;前端知识杂烩（偏向 uniapp 小程序）&quot;">​</a></h1><h4 id="css-的-width-100-和-width-100vw-有什么区别" tabindex="-1">css 的 width=100% 和 width=100vw 有什么区别？ <a class="header-anchor" href="#css-的-width-100-和-width-100vw-有什么区别" aria-label="Permalink to &quot;css 的 width=100% 和 width=100vw 有什么区别？&quot;">​</a></h4><p>100% 包含了滚动条，100vw 没有包含滚动条。当页面没有滚动条时，两者的宽度相同。</p><h4 id="项目中的依赖有用到-node-sass-包-一定要看看自己的-nodejs-版本" tabindex="-1">项目中的依赖有用到 node-sass 包，一定要看看自己的 nodejs 版本 <a class="header-anchor" href="#项目中的依赖有用到-node-sass-包-一定要看看自己的-nodejs-版本" aria-label="Permalink to &quot;项目中的依赖有用到 node-sass 包，一定要看看自己的 nodejs 版本&quot;">​</a></h4><p>可以看看这个链接，node-sass 的版本哪些 node 版本能使用。</p><p><a href="https://github.com/sass/node-sass/releases?page=1" target="_blank" rel="noreferrer">https://github.com/sass/node-sass/releases?page=1</a></p><h4 id="小程序开发工具上输入框能触发-focus-事件-但是不能看见聚焦闪烁的光标" tabindex="-1">小程序开发工具上输入框能触发 focus 事件，但是不能看见聚焦闪烁的光标 <a class="header-anchor" href="#小程序开发工具上输入框能触发-focus-事件-但是不能看见聚焦闪烁的光标" aria-label="Permalink to &quot;小程序开发工具上输入框能触发 focus 事件，但是不能看见聚焦闪烁的光标&quot;">​</a></h4><p>原因为开发工具上显示有问题。真机调试则没有问题</p><h4 id="radio-单选框的-value-值是-string-类型" tabindex="-1">radio 单选框的 value 值是 string 类型 <a class="header-anchor" href="#radio-单选框的-value-值是-string-类型" aria-label="Permalink to &quot;radio 单选框的 value 值是 string 类型&quot;">​</a></h4><p>不能是数字</p><h4 id="mounted-和-onload-生命周期钩子有什么区别-onload-和-onshow-执行的先后顺序" tabindex="-1">mounted 和 onLoad 生命周期钩子有什么区别？onLoad 和 onShow 执行的先后顺序？ <a class="header-anchor" href="#mounted-和-onload-生命周期钩子有什么区别-onload-和-onshow-执行的先后顺序" aria-label="Permalink to &quot;mounted 和 onLoad 生命周期钩子有什么区别？onLoad 和 onShow 执行的先后顺序？&quot;">​</a></h4><p>mounted 是组件级的生命周期钩子，onLoad 是页面级的生命周期钩子，不能混用。</p><p>onLoad 先执行，然后再是 onShow 执行。</p><h4 id="foreach-和-for-循环有什么区别" tabindex="-1">forEach 和 for 循环有什么区别？ <a class="header-anchor" href="#foreach-和-for-循环有什么区别" aria-label="Permalink to &quot;forEach 和 for 循环有什么区别？&quot;">​</a></h4><p>forEach 里 break 无效。</p><h4 id="在组件上直接写一些-class-类不会生效。" tabindex="-1">在组件上直接写一些 class 类不会生效。 <a class="header-anchor" href="#在组件上直接写一些-class-类不会生效。" aria-label="Permalink to &quot;在组件上直接写一些 class 类不会生效。&quot;">​</a></h4><p>小程序不一样点，每个组件下面都有一个#shadow-root 节点。</p><h4 id="reactive-结合-object-assign-使用不会触发响应式" tabindex="-1">reactive 结合 Object.assign 使用不会触发响应式 <a class="header-anchor" href="#reactive-结合-object-assign-使用不会触发响应式" aria-label="Permalink to &quot;reactive 结合 Object.assign 使用不会触发响应式&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg, {a:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg,()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里可能不会打印</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre></div><p>解决：这应该是 bug，最新版的 vue 就没有这个问题</p><h4 id="原生组件能覆盖一些普通组件" tabindex="-1">原生组件能覆盖一些普通组件 <a class="header-anchor" href="#原生组件能覆盖一些普通组件" aria-label="Permalink to &quot;原生组件能覆盖一些普通组件&quot;">​</a></h4><p>利用这一点可以把页面内容写在原生组件里（比如 scroll-view），覆盖作为背景图的普通组件。</p><h4 id="不要在模板上做太多判断-可能会意想不到的出现问题" tabindex="-1">不要在模板上做太多判断，可能会意想不到的出现问题 <a class="header-anchor" href="#不要在模板上做太多判断-可能会意想不到的出现问题" aria-label="Permalink to &quot;不要在模板上做太多判断，可能会意想不到的出现问题&quot;">​</a></h4><p>比如响应式不能更新了。</p><h4 id="scroll-view-的子元素显示不全问题" tabindex="-1">scroll-view 的子元素显示不全问题 <a class="header-anchor" href="#scroll-view-的子元素显示不全问题" aria-label="Permalink to &quot;scroll-view 的子元素显示不全问题&quot;">​</a></h4><p>scroll-view 组件一定要给它一个确定的高度或宽度。或者使用 flex 布局配合 flex: 0 0 auto;和 flex: 1 1 auto;给它一个高度。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height: 100%;display: flex;flex-direction: column;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height: 100px;flex: none;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scroll-view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height: 0;flex: 1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scroll-y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(item,index) in 100&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height: 50px;border:1px solid #000;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{item}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scroll-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    page {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="screenheight-和-windowheight-的区别" tabindex="-1">screenHeight 和 windowHeight 的区别？ <a class="header-anchor" href="#screenheight-和-windowheight-的区别" aria-label="Permalink to &quot;screenHeight 和 windowHeight 的区别？&quot;">​</a></h4><p>screenHeight 是整个手机屏幕的高度，包括状态栏、导航栏、tabbar。</p><p>windowHeight 是 webview 的高度（都以 w 开头，不包括手机的状态栏、导航栏、tabbar）。</p><p>单位也不同，screenHeight 是 rpx，windowHeight 是 px。</p><h4 id="loadash-的-uniq-函数" tabindex="-1">loadash 的 uniq 函数 <a class="header-anchor" href="#loadash-的-uniq-函数" aria-label="Permalink to &quot;loadash 的 uniq 函数&quot;">​</a></h4><p>创建一个去重后的<code>array</code>数组副本。只有第一次出现的元素才会被保留。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array)</span></span></code></pre></div><h4 id="页面怎么复用" tabindex="-1">页面怎么复用？ <a class="header-anchor" href="#页面怎么复用" aria-label="Permalink to &quot;页面怎么复用？&quot;">​</a></h4><p>直接跳转到当前页面。</p><h4 id="vue-的-template-模板上不能使用可选链" tabindex="-1">vue 的 template 模板上不能使用可选链 <a class="header-anchor" href="#vue-的-template-模板上不能使用可选链" aria-label="Permalink to &quot;vue 的 template 模板上不能使用可选链&quot;">​</a></h4><p>选择使用 lodash 的 get 方法。例如</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(couponDetailState, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;coupon.couponUseUserName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>但是这好像会导致触发不了响应式。</p><h4 id="vue-中的-computed、props、methods、data、watch-选项的执行顺序" tabindex="-1">vue 中的 computed、props、methods、data、watch 选项的执行顺序？ <a class="header-anchor" href="#vue-中的-computed、props、methods、data、watch-选项的执行顺序" aria-label="Permalink to &quot;vue 中的 computed、props、methods、data、watch 选项的执行顺序？&quot;">​</a></h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23c271d4eb9e4be6b2f3523f994a6650~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" loading="lazy"></p><h4 id="省略号-css-样式不生效问题" tabindex="-1">省略号 css 样式不生效问题 <a class="header-anchor" href="#省略号-css-样式不生效问题" aria-label="Permalink to &quot;省略号 css 样式不生效问题&quot;">​</a></h4><p>需要文本的父元素需要固定宽度，所以可以将 flex：1 和 width：0 配和使用。</p><p>有时候使用省略号 css 的父元素好像不能使用 flex 盒模型。</p><h4 id="文本换行" tabindex="-1">文本换行 <a class="header-anchor" href="#文本换行" aria-label="Permalink to &quot;文本换行&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">第一行内容\\r\\n第二行内容\\r\\n第三行内容\\r\\n第四行内容</span></span></code></pre></div><h4 id="解决滚动条影响页面宽度问题" tabindex="-1">解决滚动条影响页面宽度问题 <a class="header-anchor" href="#解决滚动条影响页面宽度问题" aria-label="Permalink to &quot;解决滚动条影响页面宽度问题&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在最外层盒子加：margin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 100vw);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">还可以直接设置宽度为100vw</span></span></code></pre></div><h4 id="文字排版问题" tabindex="-1">文字排版问题 <a class="header-anchor" href="#文字排版问题" aria-label="Permalink to &quot;文字排版问题&quot;">​</a></h4><p>有些文字换行后父元素会撑高，可以给父元素设置一个固定高度。</p>`,51),n=[h];function l(p,k,r,d,o,E){return a(),i("div",null,n)}const u=s(e,[["render",l]]);export{c as __pageData,u as default};
