import{_ as s,l as a,k as t,ae as i}from"./chunks/framework.BFFW23Ds.js";const m=JSON.parse('{"title":"学习 pnpm","description":"","frontmatter":{"label":"npm"},"headers":[{"level":2,"title":"动机，节省磁盘空间","slug":"动机-节省磁盘空间","link":"#动机-节省磁盘空间","children":[]},{"level":2,"title":"生成非扁平化的 node_modules 目录","slug":"生成非扁平化的-node-modules-目录","link":"#生成非扁平化的-node-modules-目录","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"功能比较","slug":"功能比较","link":"#功能比较","children":[]},{"level":2,"title":"选项","slug":"选项","link":"#选项","children":[{"level":3,"title":"-C <path>, --dir <path>","slug":"c-path-dir-path","link":"#c-path-dir-path","children":[]},{"level":3,"title":"-w, --workspace-root","slug":"w-workspace-root","link":"#w-workspace-root","children":[]}]},{"level":2,"title":"命令","slug":"命令","link":"#命令","children":[]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"过滤","slug":"过滤","link":"#过滤","children":[]},{"level":2,"title":"管理依赖","slug":"管理依赖","link":"#管理依赖","children":[]},{"level":2,"title":"pnpm 管理 node 版本","slug":"pnpm-管理-node-版本","link":"#pnpm-管理-node-版本","children":[]},{"level":2,"title":"pnpm-workspace.yaml","slug":"pnpm-workspace-yaml","link":"#pnpm-workspace-yaml","children":[]},{"level":2,"title":"Workspace","slug":"workspace","link":"#workspace","children":[]},{"level":2,"title":"Workspace protocol (workspace:)","slug":"workspace-protocol-workspace","link":"#workspace-protocol-workspace","children":[]},{"level":2,"title":"Workspace 匹配策略","slug":"workspace-匹配策略","link":"#workspace-匹配策略","children":[]},{"level":2,"title":"显示 npm 用户名","slug":"显示-npm-用户名","link":"#显示-npm-用户名","children":[]},{"level":2,"title":"workspace 中如何使用 changesets","slug":"workspace-中如何使用-changesets","link":"#workspace-中如何使用-changesets","children":[]},{"level":2,"title":"只允许 pnpm","slug":"只允许-pnpm","link":"#只允许-pnpm","children":[]}],"relativePath":"useful/npm, yarn, pnpm/学习 pnpm.md","filePath":"useful/npm, yarn, pnpm/学习 pnpm.md","lastUpdated":1709816942000}'),e={name:"useful/npm, yarn, pnpm/学习 pnpm.md"},n=i(`<h1 id="学习-pnpm" tabindex="-1">学习 pnpm <a class="header-anchor" href="#学习-pnpm" aria-label="Permalink to &quot;学习 pnpm&quot;">​</a></h1><h2 id="动机-节省磁盘空间" tabindex="-1">动机，节省磁盘空间 <a class="header-anchor" href="#动机-节省磁盘空间" aria-label="Permalink to &quot;动机，节省磁盘空间&quot;">​</a></h2><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/585d84e3b74d467da6b9c803b7a8f3f8.png" alt="" loading="lazy"></p><h2 id="生成非扁平化的-node-modules-目录" tabindex="-1">生成非扁平化的 node_modules 目录 <a class="header-anchor" href="#生成非扁平化的-node-modules-目录" aria-label="Permalink to &quot;生成非扁平化的 node_modules 目录&quot;">​</a></h2><p>当使用 npm 或 yarn 来安装依赖，所有包被提升到根模块。这导致，源码能获取到它们，虽然它们没有被作为依赖添加到项目中的 dependencies。</p><p>默认情况下，pnpm 使用符号链接来添加项目的直接依赖，位置在模块的根目录。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span></code></pre></div><h2 id="功能比较" tabindex="-1">功能比较 <a class="header-anchor" href="#功能比较" aria-label="Permalink to &quot;功能比较&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Feature</th><th>pnpm</th><th>Yarn</th><th>npm</th></tr></thead><tbody><tr><td>共享工作空间支持</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>隔离 <code>node_modules</code></td><td>✔️ - 默认</td><td>✔️</td><td>✔️</td></tr><tr><td>提升 <code>node_modules</code></td><td>✔️</td><td>✔️</td><td>✔️ - 默认</td></tr><tr><td>自动安装 peers</td><td>✔️ - 通过 [auto-install-peers=true]</td><td>❌</td><td>✔️</td></tr><tr><td>Plug&#39;n&#39;Play（即插即用功能）</td><td>✔️</td><td>✔️ - 默认</td><td>❌</td></tr><tr><td>零安装</td><td>❌</td><td>✔️</td><td>❌</td></tr><tr><td>更新依赖</td><td>✔️</td><td>✔️</td><td>❌</td></tr><tr><td>管理 nodejs 版本</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td>有 lockfile 文件</td><td>✔️ - <code>pnpm-lock.yaml</code></td><td>✔️ - <code>yarn.lock</code></td><td>✔️ - <code>package-lock.json</code></td></tr><tr><td>Overrides 支持</td><td>✔️</td><td>✔️ - 通过 resolutions</td><td>✔️</td></tr><tr><td>内容寻址存储</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td>动态包执行</td><td>✔️ -通过 <code>pnpm dlx</code></td><td>✔️ - 通过 <code>yarn dlx</code></td><td>✔️ - 通过 <code>npx</code></td></tr><tr><td>副作用缓存</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td>列出 licenses</td><td>✔️ - 通过 <code>pnpm licenses list</code></td><td>✔️ - 通过 plugin</td><td>❌</td></tr></tbody></table><p><code>[auto-install-peers=true]: npmrc.md#auto-install-peers</code></p><h2 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to &quot;选项&quot;">​</a></h2><p>不像 npm 不验证，pnpm 会验证所有选项，非法的选项将会出错。比如，<code>pnpm install --target_arch x64</code> 会验证失败，因为 --target_arch 是一个非法的选项。</p><h3 id="c-path-dir-path" tabindex="-1"><code>-C &lt;path&gt;, --dir &lt;path&gt;</code> <a class="header-anchor" href="#c-path-dir-path" aria-label="Permalink to &quot;\`-C &lt;path&gt;, --dir &lt;path&gt;\`&quot;">​</a></h3><p>使用该选项，会在 <code>&lt;path&gt;</code> 路径下执行 pnpm 脚本命令，而不是当前工作目录。</p><h3 id="w-workspace-root" tabindex="-1">-w, --workspace-root <a class="header-anchor" href="#w-workspace-root" aria-label="Permalink to &quot;-w, --workspace-root&quot;">​</a></h3><p>使用该选项，会在工作空间的根目录下执行 pnpm 脚本命令。</p><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">npm 命令</th><th style="text-align:center;">等效的 pnpm 命令</th></tr></thead><tbody><tr><td style="text-align:center;">npm install</td><td style="text-align:center;">pnpm install</td></tr><tr><td style="text-align:center;">npm i pkg</td><td style="text-align:center;">pnpm add pkg</td></tr><tr><td style="text-align:center;">npm run cmd</td><td style="text-align:center;">pnpm cmd</td></tr></tbody></table><p>当使用一个未知的命令时，pnpm 将会在 package.json 里搜索对应名字的脚本。所以 pnpm run lint 等同于 pnpm lint。</p><p>如果没有对应名字的 script，那么 pnpm 将会把命令作为 shell 脚本执行。所以你能够使用 pnpm eslint（等同于 pnpm exec eslint）。</p><p>pnpm exec <code>&lt;name&gt;</code> 意为执行 node_modules/.bin 下的 shell 命令。</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>pnpm 使用 npm 安装依赖时的配置。</p><h2 id="过滤" tabindex="-1">过滤 <a class="header-anchor" href="#过滤" aria-label="Permalink to &quot;过滤&quot;">​</a></h2><p>过滤允许你限制命令只在特定的包下面生效。</p><p>pnpm 支持丰富的选择器语法来选择包，比如通过名字或相对路径。</p><p>选择器通过 <code>--filter (or -F)</code> 标志指定。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package_selecto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">comman</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="管理依赖" tabindex="-1">管理依赖 <a class="header-anchor" href="#管理依赖" aria-label="Permalink to &quot;管理依赖&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Command</th><th>Meaning</th></tr></thead><tbody><tr><td>pnpm add sax</td><td>保存到生产依赖</td></tr><tr><td>pnpm add -D sax</td><td>保存到开发依赖</td></tr><tr><td>pnpm add -O sax</td><td>保存到可选依赖</td></tr><tr><td>pnpm add -g sax</td><td>安装到全局</td></tr><tr><td>pnpm add sax@next</td><td>从下一个标记安装</td></tr><tr><td>pnpm add sax@3.0.0</td><td>指定 3.0.0 版本</td></tr></tbody></table><h2 id="pnpm-管理-node-版本" tabindex="-1">pnpm 管理 node 版本 <a class="header-anchor" href="#pnpm-管理-node-版本" aria-label="Permalink to &quot;pnpm 管理 node 版本&quot;">​</a></h2><p>没试过。现在还在用 nvm 管理 node 版本。</p><h2 id="pnpm-workspace-yaml" tabindex="-1">pnpm-workspace.yaml <a class="header-anchor" href="#pnpm-workspace-yaml" aria-label="Permalink to &quot;pnpm-workspace.yaml&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 所有在 packages/ 直接子目录下的包会加入到工作空间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/*&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 只要在 components/ 目录下的包，不管层级，都会加入到工作空间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;components/**&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 但是要排除在 test 目录下的包，它们不会加入到工作空间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!**/test/**&#39;</span></span></code></pre></div><h2 id="workspace" tabindex="-1">Workspace <a class="header-anchor" href="#workspace" aria-label="Permalink to &quot;Workspace&quot;">​</a></h2><p>pnpm 对 monorepositories 有内置支持。（又名 multi-package 仓库，multi-project 仓库，monolithic 仓库）。你可以在一个单仓库中创建一个工作空间，来联合多个项目。</p><p><strong>一个工作空间必须有一个 pnpm-workspace.yaml 文件在根目录</strong>。也可能需要 <code>.npmrc</code> 文件来进行其它的配置。</p><h2 id="workspace-protocol-workspace" tabindex="-1">Workspace protocol (workspace:) <a class="header-anchor" href="#workspace-protocol-workspace" aria-label="Permalink to &quot;Workspace protocol (workspace:)&quot;">​</a></h2><p>默认情况下，如果可获取的包符合声明的版本范围，pnpm 将从工作空间链接包。</p><p>举例，foo@1.0.0 将会被链接到 bar 里面：如果 bar 有一个依赖 &quot;foo&quot;:&quot;^1.0.0&quot;，并且包 foo@1.0.0 在那个工作空间下。</p><p>但如果 bar 有一个依赖 &quot;foo&quot;: &quot;2.0.0&quot;，并且 foo@2.0.0 不再工作空间下，foo@2.0.0 将会从仓库中下载。这个行为导致一些不确定性。</p><p>幸运的是，pnpm 支持 workspace: protocol。当使用 protocol 时，pnpm 将会拒绝处理任何事除了本地工作空间的包。</p><p>所以，如果你设置 &quot;foo&quot;: &quot;workspace:2.0.0&quot;，这次安装将会失败，因为 &quot;foo@2.0.0&quot; 不在当前的工作空间里。</p><h2 id="workspace-匹配策略" tabindex="-1">Workspace 匹配策略 <a class="header-anchor" href="#workspace-匹配策略" aria-label="Permalink to &quot;Workspace 匹配策略&quot;">​</a></h2><p>npm 的版本匹配策略</p><ul><li>^1.0.1：只要主版本一致都匹配（1.x），如：1、1.x（后面两个版本随便变）</li><li>~1.0.1：只要主版本和次版本一致都匹配（1.1.x），如：1.1、1.1.x（后面一个版本随便变）</li><li>1.0.1：只能匹配 1.0.1 版本。</li></ul><p>Workspace 匹配策略</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 匹配最新版</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ah-ailpha/utils@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ah-ailpha/components</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只要主版本一致都匹配</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ah-ailpha/utils@^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ah-ailpha/components</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只要主版本和次版本一致都匹配</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ah-ailpha/utils@~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ah-ailpha/components</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只能匹配 1.0.1 版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ah-ailpha/utils@1.0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ah-ailpha/components</span></span></code></pre></div><h2 id="显示-npm-用户名" tabindex="-1">显示 npm 用户名 <a class="header-anchor" href="#显示-npm-用户名" aria-label="Permalink to &quot;显示 npm 用户名&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm whoami [--registry &lt;registry&gt;]</span></span></code></pre></div><h2 id="workspace-中如何使用-changesets" tabindex="-1">workspace 中如何使用 changesets <a class="header-anchor" href="#workspace-中如何使用-changesets" aria-label="Permalink to &quot;workspace 中如何使用 changesets&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @changesets/cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加 changeset</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span></span></code></pre></div><p>更新版本并发布</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre></div><h2 id="只允许-pnpm" tabindex="-1">只允许 pnpm <a class="header-anchor" href="#只允许-pnpm" aria-label="Permalink to &quot;只允许 pnpm&quot;">​</a></h2><p>当在项目中使用 pnpm 时，如果不希望用户使用 yarn 或者 npm 安装依赖，可以将下面的这个 preinstall 脚本添加到工程根目录下的 package.json 中：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npx only-allow pnpm&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,58),l=[n];function p(d,h,r,o,k,c){return t(),a("div",null,l)}const u=s(e,[["render",p]]);export{m as __pageData,u as default};
