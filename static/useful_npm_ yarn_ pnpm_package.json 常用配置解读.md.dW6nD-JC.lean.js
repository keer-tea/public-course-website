import{_ as s,l as i,k as a,ae as e}from"./chunks/framework.BFFW23Ds.js";const g=JSON.parse('{"title":"package.json 常用配置解读","description":"","frontmatter":{"label":"npm"},"headers":[{"level":2,"title":"1. 描述配置","slug":"_1-描述配置","link":"#_1-描述配置","children":[{"level":3,"title":"name","slug":"name","link":"#name","children":[]},{"level":3,"title":"version","slug":"version","link":"#version","children":[]},{"level":3,"title":"repository","slug":"repository","link":"#repository","children":[]},{"level":3,"title":"description","slug":"description","link":"#description","children":[]},{"level":3,"title":"keywords","slug":"keywords","link":"#keywords","children":[]},{"level":3,"title":"homepage","slug":"homepage","link":"#homepage","children":[]},{"level":3,"title":"bugs","slug":"bugs","link":"#bugs","children":[]},{"level":3,"title":"license","slug":"license","link":"#license","children":[]},{"level":3,"title":"author","slug":"author","link":"#author","children":[]}]},{"level":2,"title":"2. 文件配置","slug":"_2-文件配置","link":"#_2-文件配置","children":[{"level":3,"title":"files","slug":"files","link":"#files","children":[]},{"level":3,"title":"type","slug":"type","link":"#type","children":[]},{"level":3,"title":"main","slug":"main","link":"#main","children":[]},{"level":3,"title":"browser","slug":"browser","link":"#browser","children":[]},{"level":3,"title":"module","slug":"module","link":"#module","children":[]},{"level":3,"title":"exports","slug":"exports","link":"#exports","children":[]},{"level":3,"title":"workspaces","slug":"workspaces","link":"#workspaces","children":[]}]},{"level":2,"title":"3. 脚本配置","slug":"_3-脚本配置","link":"#_3-脚本配置","children":[{"level":3,"title":"bin","slug":"bin","link":"#bin","children":[]},{"level":3,"title":"scripts","slug":"scripts","link":"#scripts","children":[]},{"level":3,"title":"config","slug":"config","link":"#config","children":[]}]},{"level":2,"title":"4. 依赖配置","slug":"_4-依赖配置","link":"#_4-依赖配置","children":[{"level":3,"title":"dependencies","slug":"dependencies","link":"#dependencies","children":[]},{"level":3,"title":"devDependencies","slug":"devdependencies","link":"#devdependencies","children":[]},{"level":3,"title":"peerDependencies","slug":"peerdependencies","link":"#peerdependencies","children":[]},{"level":3,"title":"optionalDependencies","slug":"optionaldependencies","link":"#optionaldependencies","children":[]},{"level":3,"title":"peerDependenciesMeta","slug":"peerdependenciesmeta","link":"#peerdependenciesmeta","children":[]},{"level":3,"title":"bundleDependencies","slug":"bundledependencies","link":"#bundledependencies","children":[]},{"level":3,"title":"overrides","slug":"overrides","link":"#overrides","children":[]}]},{"level":2,"title":"5. 发布配置","slug":"_5-发布配置","link":"#_5-发布配置","children":[{"level":3,"title":"private","slug":"private","link":"#private","children":[]},{"level":3,"title":"publishConfig","slug":"publishconfig","link":"#publishconfig","children":[]}]},{"level":2,"title":"6. 系统配置","slug":"_6-系统配置","link":"#_6-系统配置","children":[{"level":3,"title":"engines","slug":"engines","link":"#engines","children":[]},{"level":3,"title":"os","slug":"os","link":"#os","children":[]},{"level":3,"title":"cpu","slug":"cpu","link":"#cpu","children":[]}]},{"level":2,"title":"7. 第三方配置","slug":"_7-第三方配置","link":"#_7-第三方配置","children":[{"level":3,"title":"types 或者 typings","slug":"types-或者-typings","link":"#types-或者-typings","children":[]},{"level":3,"title":"unpkg","slug":"unpkg","link":"#unpkg","children":[]},{"level":3,"title":"jsdelivr","slug":"jsdelivr","link":"#jsdelivr","children":[]},{"level":3,"title":"browserslist","slug":"browserslist","link":"#browserslist","children":[]},{"level":3,"title":"sideEffects","slug":"sideeffects","link":"#sideeffects","children":[]},{"level":3,"title":"lint-staged","slug":"lint-staged","link":"#lint-staged","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"useful/npm, yarn, pnpm/package.json 常用配置解读.md","filePath":"useful/npm, yarn, pnpm/package.json 常用配置解读.md","lastUpdated":1709816942000}'),n={name:"useful/npm, yarn, pnpm/package.json 常用配置解读.md"},t=e(`<h1 id="package-json-常用配置解读" tabindex="-1">package.json 常用配置解读 <a class="header-anchor" href="#package-json-常用配置解读" aria-label="Permalink to &quot;package.json 常用配置解读&quot;">​</a></h1><p>这里介绍一些常见配置，我把它们分为了 7 大类：</p><p>描述配置 文件配置 脚本配置 依赖配置 发布配置 系统配置 第三方配置</p><h2 id="_1-描述配置" tabindex="-1">1. 描述配置 <a class="header-anchor" href="#_1-描述配置" aria-label="Permalink to &quot;1. 描述配置&quot;">​</a></h2><p>主要是项目的基本信息，包括名称，版本，描述，仓库，作者等，部分会展示在 npm 官网上。</p><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><p>项目包的名称</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue&quot;</span></span></code></pre></div><h3 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h3><p>版本号。遵循 semver 版本规范。简单点说就是：</p><p>无符号那么版本必须匹配对应版本。（1.2.3）</p><p>~ 符号必须匹配前两个版本。（~1.2.3）</p><p>^ 符号必须匹配前一个版本。（^1.2.3）</p><p>其中：</p><p>1 代表主版本号，表示有破坏性的更新。</p><p>2 代表次版本号，表示有功能的新增。</p><p>3 代表修订号，表示有 bug 的修复。</p><p>关于更多版本号的知识，有需要的时候查看：<a href="https://juejin.cn/post/7122240572491825160" target="_blank" rel="noreferrer">https://juejin.cn/post/7122240572491825160</a></p><h3 id="repository" tabindex="-1">repository <a class="header-anchor" href="#repository" aria-label="Permalink to &quot;repository&quot;">​</a></h3><p>在这下面，指出你代码所在仓库的 url。这对想对你的仓库贡献代码的人很有用。</p><p>如果你的包的 package.json 不在根目录（例如它是 monorepo 的一部分），你可以明确指出它所在的目录。（不一定要使用，因为我看 vue 也没用 directory 字段，只能说有些东西没有也不影响）。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/facebook/react.git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;directory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages/react-dom&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;description&quot;">​</a></h3><p>项目的描述，让别人快速了解项目。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;React is a JavaScript library for building user interfaces.&quot;</span></span></code></pre></div><h3 id="keywords" tabindex="-1">keywords <a class="header-anchor" href="#keywords" aria-label="Permalink to &quot;keywords&quot;">​</a></h3><p>一组项目的技术关键词，比如 Ant Design 组件库的 keywords 如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;keywords&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;ant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;component&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;components&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;design&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;framework&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;frontend&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;react-component&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;ui&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span></code></pre></div><p>好的关键词可以帮助别人在 npm 官网上更好地检索到此项目，增加曝光率。</p><h3 id="homepage" tabindex="-1">homepage <a class="header-anchor" href="#homepage" aria-label="Permalink to &quot;homepage&quot;">​</a></h3><p>项目主页的链接，通常是项目 github 链接，项目官网或文档首页。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;homepage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://reactjs.org/&quot;</span></span></code></pre></div><h3 id="bugs" tabindex="-1">bugs <a class="header-anchor" href="#bugs" aria-label="Permalink to &quot;bugs&quot;">​</a></h3><p>项目 bug 反馈地址，通常是 github issue 页面的链接。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bugs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/vuejs/core/issues&quot;</span></span></code></pre></div><h3 id="license" tabindex="-1">license <a class="header-anchor" href="#license" aria-label="Permalink to &quot;license&quot;">​</a></h3><p>项目的开源许可证。项目的版权拥有人可以使用开源许可证来限制源码的使用、复制、修改和再发布等行为。常见的开源许可证有 BSD、MIT、Apache 等，它们的区别可以参考：如何选择开源许可证？</p><p><a href="https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MIT&quot;</span></span></code></pre></div><h3 id="author" tabindex="-1">author <a class="header-anchor" href="#author" aria-label="Permalink to &quot;author&quot;">​</a></h3><p>项目作者。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Li jiaxun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><h2 id="_2-文件配置" tabindex="-1">2. 文件配置 <a class="header-anchor" href="#_2-文件配置" aria-label="Permalink to &quot;2. 文件配置&quot;">​</a></h2><p>包括项目所包含的文件，以及入口等信息。</p><h3 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h3><p>指定你的包的哪些文件会被上传到 npm 上。</p><p>一些文件一定会被排除，一些文件一定会被包含，无论它们是否在 files 数组里。</p><p>可以在根目录使用 .npmignore 来忽略上传某些代码。</p><p>如果没有 .npmignore 但是有 .gitignore，那么使用 .gitignore 里面的内容。</p><p>以下文件一定会被包含，不管是否排除：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package.json</span></span>
<span class="line"><span>README</span></span>
<span class="line"><span>LICENSE / LICENCE</span></span>
<span class="line"><span>&quot;main&quot; 字段指定的文件</span></span></code></pre></div><p>README &amp; LICENSE 能有任何格式和扩展。</p><p>以下文件一定会被排除：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.git</span></span>
<span class="line"><span>CVS</span></span>
<span class="line"><span>.svn</span></span>
<span class="line"><span>.hg</span></span>
<span class="line"><span>.lock-wscript</span></span>
<span class="line"><span>.wafpickle-N</span></span>
<span class="line"><span>.*.swp</span></span>
<span class="line"><span>.DS_Store</span></span>
<span class="line"><span>._*</span></span>
<span class="line"><span>npm-debug.log</span></span>
<span class="line"><span>.npmrc</span></span>
<span class="line"><span>node_modules</span></span>
<span class="line"><span>config.gypi</span></span>
<span class="line"><span>*.orig</span></span>
<span class="line"><span>package-lock.json (use npm-shrinkwrap.json if you wish it to be published)</span></span></code></pre></div><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><p>在 node 支持 ES 模块后，要求 ES 模块采用 .mjs 后缀文件名。只要遇到 .mjs 文件，就认为它是 ES 模块。如果不想修改文件后缀，就可以在 package.json 文件中，指定 type 字段为 module。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span></code></pre></div><p>这样所有 .js 后缀的文件，node 都会用 ES 模块解释。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 使用 ES 模块规范</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ node index.js</span></span></code></pre></div><p>如果还要使用 CommonJS 模块规范，那么需要将 CommonJS 脚本的后缀名都改成.cjs，不过两种模块规范最好不要混用，会产生异常报错。</p><h3 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">​</a></h3><p>main 字段是一个模块的 id，它是你程序的主要入口。</p><p>值应该是一个相对路径。</p><p>如果没有设置 main，那么 index.js 会作为入口。</p><p>因为 main 字段里指定的是项目的入口文件，在 browser 和 Node 环境中都可以使用。</p><p>这是早期只有 CommonJS 模块规范时，指定项目入口的唯一属性。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span></code></pre></div><h3 id="browser" tabindex="-1">browser <a class="header-anchor" href="#browser" aria-label="Permalink to &quot;browser&quot;">​</a></h3><p>If your module is meant to be used client-side the browser field should be used instead of the main field. This is helpful to hint users that it might rely on primitives that aren&#39;t available in Node.js modules. (e.g. window)</p><p>如果你的模块打算在 client 端被使用，那么应该使用 brower 字段而不是 main 字段。</p><p>这能有效的提醒用户：这个包可能会依赖使用一些在 Node.js 上获取不到的东西。（比如 window）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;browser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./browser/index.js&quot;</span></span></code></pre></div><h3 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h3><p>项目也可以指定 ES 模块的入口文件，这就是 module 字段的作用。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span></span></code></pre></div><p>当一个项目同时定义了 main，browser 和 module，像 webpack，rollup 等构建工具会感知这些字段，并会根据环境以及不同的模块规范来进行不同的入口文件查找。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;browser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./browser/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span></span></code></pre></div><p>比如 webpack 构建项目时默认的 target 为 &#39;web&#39;，也就是 Web 构建。它的 resolve.mainFeilds 字段默认为 [&#39;browser&#39;, &#39;module&#39;, &#39;main&#39;]。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainFields: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;browser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>此时会按照 browser -&gt; module -&gt; main 的顺序来查找入口文件。</p><h3 id="exports" tabindex="-1">exports <a class="header-anchor" href="#exports" aria-label="Permalink to &quot;exports&quot;">​</a></h3><p>node 在 14.13 支持在 package.json 里定义 exports 字段，拥有了条件导出的功能。 exports 字段可以配置不同环境对应的模块入口文件，并且当它存在时，它的优先级最高。 比如使用 require 和 import 字段根据模块规范分别定义入口：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>这样的配置在使用 import &#39;xxx&#39; 和 require(&#39;xxx&#39;) 时会从不同的入口引入文件，exports 也支持使用 browser 和 node 字段定义 browser 和 Node 环境中的入口。</p><p>上方的写法其实等同于：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为什么要加一个层级，把 require 和 import 放在 &quot;.&quot; 下面呢？</p><p>因为 exports 除了支持配置包的默认导出，还支持配置包的子路径。</p><p>比如一些第三方 UI 包需要引入对应的样式文件才能正常使用。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import \`packageA/dist/css/index.css\`;</span></span></code></pre></div><p>我们可以使用 exports 来封装文件路径：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;./style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/css/index.css&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">},</span></span></code></pre></div><p>用户引入时只需：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import \`packageA/style\`;</span></span></code></pre></div><p>除了对导出的文件路径进行封装，exports 还限制了使用者不可以访问未在 &quot;exports&quot; 中定义的任何其他路径。 比如发布的 dist 文件里有一些内部模块 dist/internal/module，被用户单独引入使用的话可能会导致主模块不可用。为了限制外部的使用，我们可以不在 exports 定义这些模块的路径，这样外部引入 packageA/dist/internal/module 模块的话就会报错。 结合上面入口文件配置的知识，再来看看下方 vite 官网推荐的第三方库入口文件的定义，就很容易理解了。</p><h3 id="workspaces" tabindex="-1">workspaces <a class="header-anchor" href="#workspaces" aria-label="Permalink to &quot;workspaces&quot;">​</a></h3><p>项目的工作区配置，用于在本地的根目录下管理多个子项目。可以自动地在 npm install 时将 workspaces 下面的包，软链到根目录的 node_modules 中，不用手动执行 npm link 操作。 workspaces 字段接收一个数组，数组里可以是文件夹名称或者通配符。比如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;workspace-a&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>表示在 workspace-a 目录下还有一个项目，它也有自己的 package.json。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">workspace-a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  └── package.json</span></span></code></pre></div><p>通常子项目都会平铺管理在 packages 目录下，所以根目录下 workspaces 通常配置为：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;packages/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="_3-脚本配置" tabindex="-1">3. 脚本配置 <a class="header-anchor" href="#_3-脚本配置" aria-label="Permalink to &quot;3. 脚本配置&quot;">​</a></h2><h3 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-label="Permalink to &quot;bin&quot;">​</a></h3><p>与 main 字段不同，main 字段是指定包的入口文件。而 bin 的作用是指定命令行工具的入口文件。可以是字符串或对象。</p><p>比如你执行 <code>npx auto-build-all</code>（<code>auto-build-all</code> 是一个包名），它就会去执行 package.json 中 bin 字段指定的文件。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;auto-build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="scripts" tabindex="-1">scripts <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;scripts&quot;">​</a></h3><p>指定项目的一些内置脚本命令，这些命令可以通过 npm run 来执行。通常包含项目开发，构建 等 CI 命令，比如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我们可以使用命令 npm run build / yarn build 来执行项目构建。</p><p>除了指定基础命令，还可以配合 pre 和 post 完成命令的前置和后续操作，比如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prebuild&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build 执行之前的钩子</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;postbuild&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // build 执行之后的钩子</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当执行 npm run build 命令时，会按照 prebuild -&gt; build -&gt; postbuild 的顺序依次执行上方的命令。 但是这样的隐式逻辑很可能会造成执行工作流的混乱，所以 pnpm 和 yarn2 都已经废弃掉了这种 pre/post 自动执行的逻辑，参考 pnpm issue 讨论 <a href="https://github.com/pnpm/pnpm/issues/2891" target="_blank" rel="noreferrer">https://github.com/pnpm/pnpm/issues/2891</a> 如果需要手动开启，pnpm 项目可以设置 .npmrc enable-pre-post-scripts=true。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/pnpm/pnpm/issues/2891</span></span></code></pre></div><h3 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;config&quot;">​</a></h3><p>config 用于设置 scripts 里的脚本在运行时的参数。比如设置 port 为 3001：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3001&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在执行脚本时，我们可以通过 npm_package_config_port 这个变量访问到 3001。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>console.log(process.env.npm_package_config_port); // 3001</span></span></code></pre></div><h2 id="_4-依赖配置" tabindex="-1">4. 依赖配置 <a class="header-anchor" href="#_4-依赖配置" aria-label="Permalink to &quot;4. 依赖配置&quot;">​</a></h2><p>项目可能会依赖其他包，需要在 package.json 里配置这些依赖的信息。</p><h3 id="dependencies" tabindex="-1">dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;dependencies&quot;">​</a></h3><p>运行依赖，也就是项目生产环境下需要用到的依赖。比如 react，vue，状态管理库以及组件库等。</p><p>使用 npm install xxx 或则 npm install xxx --save 时，会被自动插入到该字段中。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^18.2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;react-dom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^18.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="devdependencies" tabindex="-1">devDependencies <a class="header-anchor" href="#devdependencies" aria-label="Permalink to &quot;devDependencies&quot;">​</a></h3><p>开发依赖，项目开发环境需要用到而运行时不需要的依赖，用于辅助开发，通常包括项目工程化工具比如 webpack，vite，eslint 等。 使用 npm install xxx -D 或者 npm install xxx --save-dev 时，会被自动插入到该字段中。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;webpack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^5.69.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-label="Permalink to &quot;peerDependencies&quot;">​</a></h3><p>同伴依赖，一种特殊的依赖，不会被自动安装，通常用于表示与另一个包的依赖与兼容性关系来警示使用者。 比如我们安装 A，A 的正常使用依赖 B@2.x 版本，那么 B@2.x 就应该被列在 A 的 peerDependencies 下，表示“如果你使用我，那么你也需要安装 B，并且至少是 2.x 版本”。 比如 React 组件库 Ant Design，它的 package.json 里 peerDependencies 为</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=16.9.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;react-dom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=16.9.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>表示如果你使用 Ant Design，那么你的项目也应该安装 react 和 react-dom，并且版本需要大于等于 16.9.0。</p><h3 id="optionaldependencies" tabindex="-1">optionalDependencies <a class="header-anchor" href="#optionaldependencies" aria-label="Permalink to &quot;optionalDependencies&quot;">​</a></h3><p>可选依赖，顾名思义，表示依赖是可选的，它不会阻塞主功能的使用，安装或者引入失败也无妨。这类依赖如果安装失败，那么 npm 的整个安装过程也是成功的。 比如我们使用 colors 这个包来对 console.log 打印的信息进行着色来增强和区分提示，但它并不是必需的，所以可以将其加入到 optionalDependencies，并且在运行时处理引入失败的逻辑。 使用 npm install xxx -O 或者 npm install xxx --save-optional 时，依赖会被自动插入到该字段中。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;optionalDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;colors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.4.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="peerdependenciesmeta" tabindex="-1">peerDependenciesMeta <a class="header-anchor" href="#peerdependenciesmeta" aria-label="Permalink to &quot;peerDependenciesMeta&quot;">​</a></h3><p>同伴依赖也可以使用 peerDependenciesMeta 将其指定为可选的。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;colors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.4.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;peerDependenciesMeta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;colors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;optional&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h3 id="bundledependencies" tabindex="-1">bundleDependencies <a class="header-anchor" href="#bundledependencies" aria-label="Permalink to &quot;bundleDependencies&quot;">​</a></h3><p>打包依赖。它的值是一个数组，在发布包时，bundleDependencies 里面的依赖都会被一起打包。 比如指定 react 和 react-dom 为打包依赖：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundleDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;react-dom&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>在执行 npm pack 打包生成 tgz 压缩包中，将出现 node_modules 并包含 react 和 react-dom。</p><p>需要注意的是，这个字段数组中的值必须是在 dependencies，devDependencies 两个里面声明过的依赖才行。</p><p>普通依赖通常从 npm registry 安装，但当你想用一个不在 npm registry 里的包，或者一个被修改过的第三方包时，打包依赖会比普通依赖更好用。</p><h3 id="overrides" tabindex="-1">overrides <a class="header-anchor" href="#overrides" aria-label="Permalink to &quot;overrides&quot;">​</a></h3><p>overrides 可以重写项目依赖的依赖，及其依赖树下某个依赖的版本号，进行包的替换。</p><p>比如某个依赖 A，由于一些原因它依赖的包 foo@1.0.0 需要替换，我们可以使用 overrides 修改 foo 的版本号：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;overrides&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.0-patch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当然这样会更改整个依赖树里的 foo，我们可以只对 A 下的 foo 进行版本号重写：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;overrides&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.0-patch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>overrides 支持任意深度的嵌套。</p><blockquote><p>如果在 yarn 里也想复写依赖版本号，需要使用 resolution 字段，而在 pnpm 里复写版本号需要使用 pnpm.overrides 字段。</p></blockquote><h2 id="_5-发布配置" tabindex="-1">5. 发布配置 <a class="header-anchor" href="#_5-发布配置" aria-label="Permalink to &quot;5. 发布配置&quot;">​</a></h2><p>主要是和项目发布相关的配置。</p><h3 id="private" tabindex="-1">private <a class="header-anchor" href="#private" aria-label="Permalink to &quot;private&quot;">​</a></h3><p>如果是私有项目，不希望发布到公共 npm 仓库上，可以将 private 设为 true。</p><p><code>&quot;private&quot;: true</code></p><h3 id="publishconfig" tabindex="-1">publishConfig <a class="header-anchor" href="#publishconfig" aria-label="Permalink to &quot;publishConfig&quot;">​</a></h3><p>顾名思义，publishConfig 就是 npm 包发布时使用的配置。</p><p>比如在安装依赖时指定了 registry 为 taobao 镜像源，但发布时希望在公网发布，就可以指定 publishConfig.registry。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;publishConfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;registry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://registry.npmjs.org/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_6-系统配置" tabindex="-1">6. 系统配置 <a class="header-anchor" href="#_6-系统配置" aria-label="Permalink to &quot;6. 系统配置&quot;">​</a></h2><p>和项目关联的系统配置，比如 node 版本或操作系统兼容性之类。这些要求只会起到提示警告的作用，即使用户的环境不符合要求，也不影响安装依赖包。</p><h3 id="engines" tabindex="-1">engines <a class="header-anchor" href="#engines" aria-label="Permalink to &quot;engines&quot;">​</a></h3><p>一些项目由于兼容性问题会对 node 或者包管理器有特定的版本号要求，比如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;engines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=14 &lt;16&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pnpm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;7&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要求 node 版本大于等于 14 且小于 16，同时 pnpm 版本号需要大于 7。</p><h3 id="os" tabindex="-1">os <a class="header-anchor" href="#os" aria-label="Permalink to &quot;os&quot;">​</a></h3><p>在 linux 上能正常运行的项目可能在 windows 上会出现异常，使用 os 字段可以指定项目对操作系统的兼容性要求。</p><p><code>&quot;os&quot;: [&quot;darwin&quot;, &quot;linux&quot;]</code></p><h3 id="cpu" tabindex="-1">cpu <a class="header-anchor" href="#cpu" aria-label="Permalink to &quot;cpu&quot;">​</a></h3><p>指定项目只能在特定的 CPU 体系上运行。</p><p><code>&quot;cpu&quot;: [&quot;x64&quot;, &quot;ia32&quot;]</code></p><h2 id="_7-第三方配置" tabindex="-1">7. 第三方配置 <a class="header-anchor" href="#_7-第三方配置" aria-label="Permalink to &quot;7. 第三方配置&quot;">​</a></h2><p>一些第三方库或应用在进行某些内部处理时会依赖这些字段，使用它们时需要安装对应的第三方库。</p><h3 id="types-或者-typings" tabindex="-1">types 或者 typings <a class="header-anchor" href="#types-或者-typings" aria-label="Permalink to &quot;types 或者 typings&quot;">​</a></h3><p>指定 TypeScript 的类型定义的入口文件</p><p><code>&quot;types&quot;: &quot;./index.d.ts&quot;,</code></p><h3 id="unpkg" tabindex="-1">unpkg <a class="header-anchor" href="#unpkg" aria-label="Permalink to &quot;unpkg&quot;">​</a></h3><p>可以让 npm 上所有的文件都开启 CDN 服务。</p><p>比如 vue package.json 的 unpkg 定义为 dist/vue.global.js</p><p><code>&quot;unpkg&quot;: &quot;dist/vue.global.js&quot;,</code></p><p>当我们想通过 CDN 的方式使用链接引入 vue 时。 访问 <a href="https://unpkg.com/vue" target="_blank" rel="noreferrer">https://unpkg.com/vue</a> 会重定向到 <a href="https://unpkg.com/vue@3.2.37/dist/vue.global.js%EF%BC%8C%E5%85%B6%E4%B8%AD" target="_blank" rel="noreferrer">https://unpkg.com/vue@3.2.37/dist/vue.global.js，其中</a> 3.2.27 是 Vue 的最新版本。</p><h3 id="jsdelivr" tabindex="-1">jsdelivr <a class="header-anchor" href="#jsdelivr" aria-label="Permalink to &quot;jsdelivr&quot;">​</a></h3><p>与 unpkg 类似，vue 通过如下的配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;jsdelivr&quot;: &quot;dist/vue.global.js&quot;,</span></span></code></pre></div><p>访问 <a href="https://cdn.jsdelivr.net/npm/vue" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/npm/vue</a> 实际上获取到的是 jsdelivr 字段里配置的文件地址。</p><h3 id="browserslist" tabindex="-1">browserslist <a class="header-anchor" href="#browserslist" aria-label="Permalink to &quot;browserslist&quot;">​</a></h3><p>设置项目的浏览器兼容情况。babel 和 autoprefixer 等工具会使用该配置对代码进行转换。当然你也可以使用 .browserslistrc 单文件配置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;browserslist&quot;: [</span></span>
<span class="line"><span>  &quot;&gt; 1%&quot;,</span></span>
<span class="line"><span>  &quot;last 2 versions&quot;</span></span>
<span class="line"><span>]</span></span></code></pre></div><h3 id="sideeffects" tabindex="-1">sideEffects <a class="header-anchor" href="#sideeffects" aria-label="Permalink to &quot;sideEffects&quot;">​</a></h3><p>显示设置某些模块具有副作用，用于 webpack 的 tree-shaking 优化。</p><p>比如在项目中整体引入 Ant Design 组件库的 css 文件。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import &#39;antd/dist/antd.css&#39;; // or &#39;antd/dist/antd.less&#39;</span></span></code></pre></div><p>如果 Ant Design 的 package.json 里不设置 sideEffects，那么 webapck 构建打包时会认为这段代码只是引入了但并没有使用，可以 tree-shaking 剔除掉，最终导致产物缺少样式。 所以 Ant Design 在 package.json 里设置了如下的 sideEffects，来告知 webpack，这些文件具有副作用，引入后不能被删除。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sideEffects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;dist/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;es/**/style/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;lib/**/style/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;*.less&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="lint-staged" tabindex="-1">lint-staged <a class="header-anchor" href="#lint-staged" aria-label="Permalink to &quot;lint-staged&quot;">​</a></h3><p>lint-staged 是用于对 git 的暂存区的文件进行操作的工具，比如可以在代码提交前执行 lint 校验，类型检查，图片优化等操作。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;lint-staged&quot;: {</span></span>
<span class="line"><span>  &quot;src/**/*.{js,jsx,ts,tsx}&quot;: [</span></span>
<span class="line"><span>    &quot;eslint --fix&quot;,</span></span>
<span class="line"><span>    &quot;git add -A&quot;</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>lint-staged 通常配合 husky 这样的 git-hooks 工具一起使用。git-hooks 用来定义一个钩子，这些钩子方法会在 git 工作流程中比如 pre-commit，commit-msg 时触发，可以把 lint-staged 放到这些钩子方法中。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noreferrer">https://docs.npmjs.com/cli/v8/configuring-npm/package-json</a></p><p><a href="https://zhuanlan.zhihu.com/p/548202395" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/548202395</a></p><p><a href="https://juejin.cn/post/7095903278084390948" target="_blank" rel="noreferrer">https://juejin.cn/post/7095903278084390948</a></p><p><a href="https://juejin.cn/post/7122240572491825160" target="_blank" rel="noreferrer">https://juejin.cn/post/7122240572491825160</a></p><p><a href="https://zhuanlan.zhihu.com/p/29855253" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/29855253</a></p><p><a href="https://juejin.cn/post/7023539063424548872" target="_blank" rel="noreferrer">https://juejin.cn/post/7023539063424548872</a></p><p><a href="https://segmentfault.com/a/1190000016365409" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000016365409</a></p><p><a href="https://github.com/SunshowerC/blog/issues/8" target="_blank" rel="noreferrer">https://github.com/SunshowerC/blog/issues/8</a></p>`,210),p=[t];function l(h,o,d,r,k,c){return a(),i("div",null,p)}const E=s(n,[["render",l]]);export{g as __pageData,E as default};
