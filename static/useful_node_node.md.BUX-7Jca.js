import{_ as s,l as i,k as a,ae as n}from"./chunks/framework.BFFW23Ds.js";const c=JSON.parse('{"title":"node","description":"","frontmatter":{"label":"node"},"headers":[{"level":2,"title":"在 ES Modules 模块中如何使用 import.meta.url 和 __dirname","slug":"在-es-modules-模块中如何使用-import-meta-url-和-dirname","link":"#在-es-modules-模块中如何使用-import-meta-url-和-dirname","children":[{"level":3,"title":"fileURLToPath","slug":"fileurltopath","link":"#fileurltopath","children":[]},{"level":3,"title":"__dirname","slug":"dirname","link":"#dirname","children":[]}]},{"level":2,"title":"在 node 中使用 ESM 模块时，需要同步加载其它模块或使用 require 加载其它 commonjs 模块时该怎么办？","slug":"在-node-中使用-esm-模块时-需要同步加载其它模块或使用-require-加载其它-commonjs-模块时该怎么办","link":"#在-node-中使用-esm-模块时-需要同步加载其它模块或使用-require-加载其它-commonjs-模块时该怎么办","children":[]},{"level":2,"title":"引入模块时模块名前加 node: 前缀的作用","slug":"引入模块时模块名前加-node-前缀的作用","link":"#引入模块时模块名前加-node-前缀的作用","children":[]},{"level":2,"title":"求路径指向的文件的扩展名","slug":"求路径指向的文件的扩展名","link":"#求路径指向的文件的扩展名","children":[]},{"level":2,"title":"已知一个文件或文件夹的路径，求该文件或文件夹的名字（不包括扩展名）","slug":"已知一个文件或文件夹的路径-求该文件或文件夹的名字-不包括扩展名","link":"#已知一个文件或文件夹的路径-求该文件或文件夹的名字-不包括扩展名","children":[]},{"level":2,"title":"获取某个文件的内容","slug":"获取某个文件的内容","link":"#获取某个文件的内容","children":[]},{"level":2,"title":"往一个文件中写入内容","slug":"往一个文件中写入内容","link":"#往一个文件中写入内容","children":[]},{"level":2,"title":"#!/usr/bin/env node 的含义","slug":"usr-bin-env-node-的含义","link":"#usr-bin-env-node-的含义","children":[]},{"level":2,"title":"删除某个文件或文件夹","slug":"删除某个文件或文件夹","link":"#删除某个文件或文件夹","children":[]},{"level":2,"title":"删除一个目录下的所有文件及文件夹","slug":"删除一个目录下的所有文件及文件夹","link":"#删除一个目录下的所有文件及文件夹","children":[]},{"level":2,"title":"判断某个文件或文件夹是否存在","slug":"判断某个文件或文件夹是否存在","link":"#判断某个文件或文件夹是否存在","children":[]},{"level":2,"title":"判断一个路径是文件还是目录","slug":"判断一个路径是文件还是目录","link":"#判断一个路径是文件还是目录","children":[]},{"level":2,"title":"获取一个文件或目录的最后一次的修改时间","slug":"获取一个文件或目录的最后一次的修改时间","link":"#获取一个文件或目录的最后一次的修改时间","children":[]},{"level":2,"title":"移动某个文件或文件夹","slug":"移动某个文件或文件夹","link":"#移动某个文件或文件夹","children":[]},{"level":2,"title":"一个目录下的所有文件（夹）移动到另一个目录下","slug":"一个目录下的所有文件-夹-移动到另一个目录下","link":"#一个目录下的所有文件-夹-移动到另一个目录下","children":[]}],"relativePath":"useful/node/node.md","filePath":"useful/node/node.md","lastUpdated":1709394628000}'),l={name:"useful/node/node.md"},e=n(`<h1 id="node" tabindex="-1">node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;node&quot;">​</a></h1><h2 id="在-es-modules-模块中如何使用-import-meta-url-和-dirname" tabindex="-1">在 ES Modules 模块中如何使用 import.meta.url 和 __dirname <a class="header-anchor" href="#在-es-modules-模块中如何使用-import-meta-url-和-dirname" aria-label="Permalink to &quot;在 ES Modules 模块中如何使用 import.meta.url 和 __dirname&quot;">​</a></h2><p>import.meta.url 属于 ES Modules 模块化中的 API；import.meta 包含当前模块的一些信息，其中 import.meta.url 表示当前模块的 file: 协议绝对路径，拿到这个绝对路径我们就可以配合其他 API 来实现 __filename 和 __dirname。（ESM 模块中没有 __dirname API）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行会得到一个基于 file 协议的 URL：file:///Users/lukecheng/Desktop/vite/vite-project2/1.ts。</span></span></code></pre></div><h3 id="fileurltopath" tabindex="-1">fileURLToPath <a class="header-anchor" href="#fileurltopath" aria-label="Permalink to &quot;fileURLToPath&quot;">​</a></h3><p>如果需要把 file 协议转换成路径，我们需要借助 Node.js 内部 url 模块的 fileURLToPath API。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fileURLToPath } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fileURLToPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url)));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将会得到 /Users/lukecheng/Desktop/vite/vite-project2</span></span></code></pre></div><h3 id="dirname" tabindex="-1">__dirname <a class="header-anchor" href="#dirname" aria-label="Permalink to &quot;__dirname&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fileURLToPath } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __dirname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fileURLToPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url))</span></span></code></pre></div><p>或者</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fileURLToPath } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:url&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前目录名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// URL 是一个全局变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __dirname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileURLToPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url))</span></span></code></pre></div><h2 id="在-node-中使用-esm-模块时-需要同步加载其它模块或使用-require-加载其它-commonjs-模块时该怎么办" tabindex="-1">在 node 中使用 ESM 模块时，需要同步加载其它模块或使用 require 加载其它 commonjs 模块时该怎么办？ <a class="header-anchor" href="#在-node-中使用-esm-模块时-需要同步加载其它模块或使用-require-加载其它-commonjs-模块时该怎么办" aria-label="Permalink to &quot;在 node 中使用 ESM 模块时，需要同步加载其它模块或使用 require 加载其它 commonjs 模块时该怎么办？&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createRequire } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkgDir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/package.json\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="引入模块时模块名前加-node-前缀的作用" tabindex="-1">引入模块时模块名前加 <code>node:</code> 前缀的作用 <a class="header-anchor" href="#引入模块时模块名前加-node-前缀的作用" aria-label="Permalink to &quot;引入模块时模块名前加 \`node:\` 前缀的作用&quot;">​</a></h2><ul><li>使用 node: 前缀来识别核心模块（内置模块），不会模块缓存，也更加规范。</li></ul><p>参考：</p><ul><li><a href="https://nodejs.org/api/modules.html#core-modules" target="_blank" rel="noreferrer">https://nodejs.org/api/modules.html#core-modules</a></li></ul><h2 id="求路径指向的文件的扩展名" tabindex="-1">求路径指向的文件的扩展名 <a class="header-anchor" href="#求路径指向的文件的扩展名" aria-label="Permalink to &quot;求路径指向的文件的扩展名&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const url = &#39;xxx.com&#39;</span></span>
<span class="line"><span>const dotIndex = url.lastIndexOf(&#39;.&#39;)</span></span>
<span class="line"><span>const extendName = url.substring(dotIndex + 1)</span></span></code></pre></div><h2 id="已知一个文件或文件夹的路径-求该文件或文件夹的名字-不包括扩展名" tabindex="-1">已知一个文件或文件夹的路径，求该文件或文件夹的名字（不包括扩展名） <a class="header-anchor" href="#已知一个文件或文件夹的路径-求该文件或文件夹的名字-不包括扩展名" aria-label="Permalink to &quot;已知一个文件或文件夹的路径，求该文件或文件夹的名字（不包括扩展名）&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:path&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不包含扩展名的文件名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).name;</span></span></code></pre></div><h2 id="获取某个文件的内容" tabindex="-1">获取某个文件的内容 <a class="header-anchor" href="#获取某个文件的内容" aria-label="Permalink to &quot;获取某个文件的内容&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// node: 表示引入的是 node 原生模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./code-compiled.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  encoding: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(content)</span></span></code></pre></div><h2 id="往一个文件中写入内容" tabindex="-1">往一个文件中写入内容 <a class="header-anchor" href="#往一个文件中写入内容" aria-label="Permalink to &quot;往一个文件中写入内容&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./code-compiled.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, code)</span></span></code></pre></div><h2 id="usr-bin-env-node-的含义" tabindex="-1">#!/usr/bin/env node 的含义 <a class="header-anchor" href="#usr-bin-env-node-的含义" aria-label="Permalink to &quot;#!/usr/bin/env node 的含义&quot;">​</a></h2><p>在一个 js 文件最顶部添加 <code>#!/usr/bin/env node</code> 有什么含义？</p><p>用来告诉操作系统用哪个解析器执行该文件。node 可以省略，这样系统会自动寻找解释器来执行该文件。</p><h2 id="删除某个文件或文件夹" tabindex="-1">删除某个文件或文件夹 <a class="header-anchor" href="#删除某个文件或文件夹" aria-label="Permalink to &quot;删除某个文件或文件夹&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buildProjectPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C:/Users/lukecheng/Desktop/code/my-test-build-project/test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buildProjectPath, { recursive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, force: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><h2 id="删除一个目录下的所有文件及文件夹" tabindex="-1">删除一个目录下的所有文件及文件夹 <a class="header-anchor" href="#删除一个目录下的所有文件及文件夹" aria-label="Permalink to &quot;删除一个目录下的所有文件及文件夹&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> files</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readdirSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buildSourcePlacePath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buildSourcePlacePath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filePath, { recursive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, force: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="判断某个文件或文件夹是否存在" tabindex="-1">判断某个文件或文件夹是否存在 <a class="header-anchor" href="#判断某个文件或文件夹是否存在" aria-label="Permalink to &quot;判断某个文件或文件夹是否存在&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">existsSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(realDistPath)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 存在</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="判断一个路径是文件还是目录" tabindex="-1">判断一个路径是文件还是目录 <a class="header-anchor" href="#判断一个路径是文件还是目录" aria-label="Permalink to &quot;判断一个路径是文件还是目录&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">statSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filePath).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">statSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filePath).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="获取一个文件或目录的最后一次的修改时间" tabindex="-1">获取一个文件或目录的最后一次的修改时间 <a class="header-anchor" href="#获取一个文件或目录的最后一次的修改时间" aria-label="Permalink to &quot;获取一个文件或目录的最后一次的修改时间&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> statOption</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">statSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tianData.logPath)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statOption.mtimeMs</span></span></code></pre></div><h2 id="移动某个文件或文件夹" tabindex="-1">移动某个文件或文件夹 <a class="header-anchor" href="#移动某个文件或文件夹" aria-label="Permalink to &quot;移动某个文件或文件夹&quot;">​</a></h2><p>如果是文件，不仅会移动，而且可以更改文件名。</p><p>如果是文件夹，不仅会移动，而且还可以更改文件名，并且目录下的所有文件也会跟着移动到对应的目录下。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renameSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distPath, realDistPath)</span></span></code></pre></div><h2 id="一个目录下的所有文件-夹-移动到另一个目录下" tabindex="-1">一个目录下的所有文件（夹）移动到另一个目录下 <a class="header-anchor" href="#一个目录下的所有文件-夹-移动到另一个目录下" aria-label="Permalink to &quot;一个目录下的所有文件（夹）移动到另一个目录下&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sourceFiles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readdirSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sourceDir)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourceFiles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sourcePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sourceDir, file)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> destinationPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buildSourcePlacePath, file)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renameSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sourcePath, destinationPath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,44),t=[e];function h(p,k,d,r,E,o){return a(),i("div",null,t)}const y=s(l,[["render",h]]);export{c as __pageData,y as default};
