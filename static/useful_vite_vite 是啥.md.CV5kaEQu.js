import{_ as i,l as s,k as t,ae as a}from"./chunks/framework.BFFW23Ds.js";const g=JSON.parse('{"title":"vite 记录","description":"","frontmatter":{"label":"vite"},"headers":[{"level":2,"title":"在 vite 中推荐使用仅含类型导入/导出形式语法","slug":"在-vite-中推荐使用仅含类型导入-导出形式语法","link":"#在-vite-中推荐使用仅含类型导入-导出形式语法","children":[]},{"level":2,"title":"作为一个本地服务器","slug":"作为一个本地服务器","link":"#作为一个本地服务器","children":[]}],"relativePath":"useful/vite/vite 是啥.md","filePath":"useful/vite/vite 是啥.md","lastUpdated":1709816942000}'),e={name:"useful/vite/vite 是啥.md"},l=a(`<h1 id="vite-记录" tabindex="-1">vite 记录 <a class="header-anchor" href="#vite-记录" aria-label="Permalink to &quot;vite 记录&quot;">​</a></h1><h2 id="在-vite-中推荐使用仅含类型导入-导出形式语法" tabindex="-1">在 vite 中推荐使用仅含类型导入/导出形式语法 <a class="header-anchor" href="#在-vite-中推荐使用仅含类型导入-导出形式语法" aria-label="Permalink to &quot;在 vite 中推荐使用仅含类型导入/导出形式语法&quot;">​</a></h2><p>使用 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export" target="_blank" rel="noreferrer">仅含类型的导入和导出</a> 形式的语法可以避免潜在的“仅含类型的导入被不正确打包”的问题，写法示例如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { T } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;only/types&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { T }</span></span></code></pre></div><h2 id="作为一个本地服务器" tabindex="-1">作为一个本地服务器 <a class="header-anchor" href="#作为一个本地服务器" aria-label="Permalink to &quot;作为一个本地服务器&quot;">​</a></h2><p>创建一个文件夹，npm init 后，只下载一个依赖 vite，然后再创建一个 index.html 文件，运行 npx vite 脚本命令，就能在浏览器预览 index.html 的内容了。</p><p>可以用作静态服务器，但不适合在生产中使用。</p><p>可以在 index.html 里写 <code>&lt;script type=&quot;module&quot;&gt;</code> 脚本，使用 import 来导入外部文件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./main.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>webpack 习惯于把 main.js 作为入口。但 vite 其实是一个静态文件服务器，所以在 vite 中，程序的入口其实是 index.html。</p>`,10),n=[l];function p(h,k,r,d,o,c){return t(),s("div",null,n)}const v=i(e,[["render",p]]);export{g as __pageData,v as default};
