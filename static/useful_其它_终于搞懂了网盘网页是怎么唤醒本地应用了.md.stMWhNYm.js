import{_ as e,l as o,k as a,ae as s}from"./chunks/framework.BFFW23Ds.js";const S=JSON.parse('{"title":"终于搞懂了网盘网页是怎么唤醒本地应用了","description":"","frontmatter":{},"headers":[{"level":2,"title":"写在前面","slug":"写在前面","link":"#写在前面","children":[]},{"level":2,"title":"自定义协议","slug":"自定义协议","link":"#自定义协议","children":[]},{"level":2,"title":"配置自定义协议","slug":"配置自定义协议","link":"#配置自定义协议","children":[]},{"level":2,"title":"浏览器打开 VS Code","slug":"浏览器打开-vs-code","link":"#浏览器打开-vs-code","children":[]},{"level":2,"title":"写在最后","slug":"写在最后","link":"#写在最后","children":[]}],"relativePath":"useful/其它/终于搞懂了网盘网页是怎么唤醒本地应用了.md","filePath":"useful/其它/终于搞懂了网盘网页是怎么唤醒本地应用了.md","lastUpdated":1709816942000}'),n={name:"useful/其它/终于搞懂了网盘网页是怎么唤醒本地应用了.md"},l=s(`<h1 id="终于搞懂了网盘网页是怎么唤醒本地应用了" tabindex="-1">终于搞懂了网盘网页是怎么唤醒本地应用了 <a class="header-anchor" href="#终于搞懂了网盘网页是怎么唤醒本地应用了" aria-label="Permalink to &quot;终于搞懂了网盘网页是怎么唤醒本地应用了&quot;">​</a></h1><h2 id="写在前面" tabindex="-1">写在前面 <a class="header-anchor" href="#写在前面" aria-label="Permalink to &quot;写在前面&quot;">​</a></h2><p>用百度网盘举例，可以通过页面打开本机的百度网盘软件，很多软件的网站页面都有这个功能。</p><p>本篇讲的是 Windows 的。</p><h2 id="自定义协议" tabindex="-1">自定义协议 <a class="header-anchor" href="#自定义协议" aria-label="Permalink to &quot;自定义协议&quot;">​</a></h2><p>本身单凭浏览器是没有唤醒本地应用这个能力的，不然随便一个网页都能打开你的所有应用那不就乱套了吗。但是电脑系统本身可以通过配置自定义协议支持这个能力。</p><p>举个例子，当你用浏览器打开一个本地的 PDF 的时候，你会发现上面是 file://path/xxx.pdf，这就是系统内置的一个协议，浏览器可以调用这个协议进行文件读取。</p><p>那么与之类似的，windows 本身也支持用户自定义协议来进行一些操作的，而这个协议就在注册表中进行配置。</p><h2 id="配置自定义协议" tabindex="-1">配置自定义协议 <a class="header-anchor" href="#配置自定义协议" aria-label="Permalink to &quot;配置自定义协议&quot;">​</a></h2><p>这里我用 VS Code 来举例子，最终我要实现通过浏览器打开我电脑上的 VS Code。</p><p>我们先编写一个注册表文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Windows Registry Editor Version 5.00</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[HKEY_CLASSES_ROOT\\vscode]</span></span>
<span class="line"><span>@=&quot;URL:VSCode Protocol&quot;</span></span>
<span class="line"><span>&quot;URL Protocol&quot;=&quot;&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[HKEY_CLASSES_ROOT\\vscode\\shell]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[HKEY_CLASSES_ROOT\\vscode\\shell\\open]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[HKEY_CLASSES_ROOT\\vscode\\shell\\open\\command]</span></span>
<span class="line"><span>@=&quot;&quot;D:\\Installation\\Microsoft VS Code\\Code.exe&quot; &quot;%1&quot;&quot;</span></span></code></pre></div><p>逐行解释下：</p><ol><li><code>Windows Registry Editor Version 5.00</code> 这行表明该文件是一个 Windows 注册表编辑器文件，这是标准的头部，用于告诉 Windows 如何解析文件</li><li><code>[HKEY_CLASSES_ROOT\\vscode]</code> 这是一个注册表键的开始。在这里，<code>\\vscode</code> 表示创建一个名为 <code>vscode</code> 的新键</li><li><code>@=&quot;URL:VSCode Protocol&quot;</code> 在 vscode 键下，这行设置了默认值（表示为 @ ），通过 &quot;URL:VSCode Protocol&quot; 对这个键进行描述</li><li><code>&quot;URL Protocol&quot;=&quot;&quot;</code> 这行是设置一个名为 URL Protocol 的空字符串值。这是代表这个新键是一个 URI 协议</li><li><code>[HKEY_CLASSES_ROOT\\vscode\\shell]</code> 创建一个名为 shell 的子键，这是一个固定键，代表 GUI 界面的处理</li><li><code>[HKEY_CLASSES_ROOT\\vscode\\shell\\open]</code> 在 shell 下创建一个名为 open 的子键。这耶是一个固定键，open 是一个标准动作，用来执行打开操作</li><li><code>[HKEY_CLASSES_ROOT\\vscode\\shell\\open\\command]</code> 在 open 下创建一个名为 command 的子键。这是一个固定键，指定了当协议被触发时要执行命令</li><li><code>@=&quot;&quot;D:\\Installation\\Microsoft VS Code\\Code.exe&quot; &quot;%1&quot;&quot;</code> 在 command 键下，设置默认值为 VSCode 的路径。 &quot;%1&quot; 是一个占位符，用于表示传递给协议的任何参数，这里并无实际用处</li></ol><p>写好了注册表文件后，我们将其保存为 vscode.reg，并双击执行，对话框选择是，相应的注册表信息就被创建出来了。</p><h2 id="浏览器打开-vs-code" tabindex="-1">浏览器打开 VS Code <a class="header-anchor" href="#浏览器打开-vs-code" aria-label="Permalink to &quot;浏览器打开 VS Code&quot;">​</a></h2><p>这时，我们打开浏览器，输入 vscode://open，浏览器弹出了询问对话框，然后就可以打开VS Code 了。</p><h2 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h2><p>自定义唤醒协议，在浏览器中输入对应的协议地址，就可以打开自定义的应用了。</p>`,19),t=[l];function d(i,c,p,r,_,u){return a(),o("div",null,t)}const q=e(n,[["render",d]]);export{S as __pageData,q as default};
