import{_ as i,l as a,k as s,ae as n}from"./chunks/framework.BFFW23Ds.js";const m=JSON.parse('{"title":"学 css 动画很难？不妨来看看这篇 css 动画","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. CSS 动画的基本概念","slug":"_1-css-动画的基本概念","link":"#_1-css-动画的基本概念","children":[]},{"level":2,"title":"2.动画需要用到 @keyframes","slug":"_2-动画需要用到-keyframes","link":"#_2-动画需要用到-keyframes","children":[]},{"level":2,"title":"3.css 动画的属性","slug":"_3-css-动画的属性","link":"#_3-css-动画的属性","children":[{"level":3,"title":"3.1 animation-duration","slug":"_3-1-animation-duration","link":"#_3-1-animation-duration","children":[]},{"level":3,"title":"3.2 animation-delay","slug":"_3-2-animation-delay","link":"#_3-2-animation-delay","children":[]},{"level":3,"title":"3.3 animation-iteration-count","slug":"_3-3-animation-iteration-count","link":"#_3-3-animation-iteration-count","children":[]},{"level":3,"title":"3.4 animation-direction","slug":"_3-4-animation-direction","link":"#_3-4-animation-direction","children":[]},{"level":3,"title":"3.5 animation-timing-function","slug":"_3-5-animation-timing-function","link":"#_3-5-animation-timing-function","children":[]},{"level":3,"title":"3.6 animation","slug":"_3-6-animation","link":"#_3-6-animation","children":[]}]}],"relativePath":"useful/css/学 css 动画很难？ 不妨来看看这篇 css 动画.md","filePath":"useful/css/学 css 动画很难？ 不妨来看看这篇 css 动画.md","lastUpdated":1709816942000}'),t={name:"useful/css/学 css 动画很难？ 不妨来看看这篇 css 动画.md"},e=n(`<h1 id="学-css-动画很难-不妨来看看这篇-css-动画" tabindex="-1">学 css 动画很难？不妨来看看这篇 css 动画 <a class="header-anchor" href="#学-css-动画很难-不妨来看看这篇-css-动画" aria-label="Permalink to &quot;学 css 动画很难？不妨来看看这篇 css 动画&quot;">​</a></h1><h2 id="_1-css-动画的基本概念" tabindex="-1">1. CSS 动画的基本概念 <a class="header-anchor" href="#_1-css-动画的基本概念" aria-label="Permalink to &quot;1. CSS 动画的基本概念&quot;">​</a></h2><p>动画是一种使元素从一种样式逐渐转变为另一种样式的效果。CSS 动画是通过改变元素的样式来实现的，这些样式可以是元素的位置、大小、颜色、背景、边框等等。</p><p>CSS 动画包含两个部分：</p><ul><li>描述动画的样式规则</li><li>描述动画开始、中间、结束的关键帧</li></ul><h2 id="_2-动画需要用到-keyframes" tabindex="-1">2.动画需要用到 @keyframes <a class="header-anchor" href="#_2-动画需要用到-keyframes" aria-label="Permalink to &quot;2.动画需要用到 @keyframes&quot;">​</a></h2><p>@keyframes 是 CSS3 中新增的一个规则，用来描述动画的关键帧。关键帧是动画的开始、中间、结束的状态。关键帧的名称可以自定义，但是必须以 <code>%</code> 结尾，表示动画的进度。(也可以直接 <code>from[起点] to [终点]</code>)</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> example1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> example2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    0%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    25%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    50%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>我们使用上面两段代码演示了一下这两种定义动画的方式，一种是 from...to...，一种是百分比的方式。</p><p>很明显使用百分比的方式可以更加精确的控制动画的效果。</p><h2 id="_3-css-动画的属性" tabindex="-1">3.css 动画的属性 <a class="header-anchor" href="#_3-css-动画的属性" aria-label="Permalink to &quot;3.css 动画的属性&quot;">​</a></h2><ul><li>animation-name：动画的名称，必须与 @keyframes 中的名称一致</li><li>animation-duration：动画的持续时间</li><li>animation-delay：动画的延迟时间</li><li>animation-iteration-count：动画的播放次数</li><li>animation-direction：动画的方向</li><li>animation-timing-function：动画的速度曲线</li><li>animation-fill-mode：动画的填充模式</li><li>animation：设置动画的所有简写属性</li></ul><h3 id="_3-1-animation-duration" tabindex="-1">3.1 animation-duration <a class="header-anchor" href="#_3-1-animation-duration" aria-label="Permalink to &quot;3.1 animation-duration&quot;">​</a></h3><p>动画的持续时间，也就是动画从开始到结束的时间，可以使用 s 或者 ms 来设置，如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    animation-duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 5s;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    animation-duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 5000ms;</span></span></code></pre></div><h3 id="_3-2-animation-delay" tabindex="-1">3.2 animation-delay <a class="header-anchor" href="#_3-2-animation-delay" aria-label="Permalink to &quot;3.2 animation-delay&quot;">​</a></h3><p>动画的延迟时间，也就是动画开始前的延迟时间，同样也是使用 s 或者 ms 来设置。</p><h3 id="_3-3-animation-iteration-count" tabindex="-1">3.3 animation-iteration-count <a class="header-anchor" href="#_3-3-animation-iteration-count" aria-label="Permalink to &quot;3.3 animation-iteration-count&quot;">​</a></h3><p>该属性用于设置动画播放的次数，可以是一个数字，也可以是 infinite，表示无限次播放，如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    animation-iteration-count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 3;// 只播放三次动画</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    animation-iteration-count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: infinite;// 无限循环</span></span></code></pre></div><h3 id="_3-4-animation-direction" tabindex="-1">3.4 animation-direction <a class="header-anchor" href="#_3-4-animation-direction" aria-label="Permalink to &quot;3.4 animation-direction&quot;">​</a></h3><p>该属性可以设置动画的播放方向，可以是 normal、reverse、alternate、alternate-reverse，如下：</p><ul><li>normal: 正常播放 (从 0% --&gt; 100%)</li><li>reverse: 反向播放 (从 100% --&gt; 0%)</li><li>alternate: 交替播放 (从 0% --&gt; 100% --&gt; 0%)</li><li>alternate-reverse: 交替反向播放 (从 100% --&gt; 0% --&gt; 100%)</li></ul><h3 id="_3-5-animation-timing-function" tabindex="-1">3.5 animation-timing-function <a class="header-anchor" href="#_3-5-animation-timing-function" aria-label="Permalink to &quot;3.5 animation-timing-function&quot;">​</a></h3><p>该属性用来设置动画的播放速度曲线，可以是 linear、ease、ease-in、ease-out、ease-in-out、cubic-bezier()，如下：</p><ul><li>linear: 动画从头到尾的速度是相同的</li><li>ease: 默认值，动画以低速开始，然后加快，在结束前变慢</li><li>ease-in: 动画以低速开始</li><li>ease-out: 动画以低速结束</li><li>ease-in-out: 动画以低速开始和结束</li><li>cubic-bezier(n,n,n,n): 在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值</li></ul><h3 id="_3-6-animation" tabindex="-1">3.6 animation <a class="header-anchor" href="#_3-6-animation" aria-label="Permalink to &quot;3.6 animation&quot;">​</a></h3><p>前面我们每一个属性就写一行代码的话，显得十分臃肿，这里我们可以使用简写属性的方式来解决问题。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animation: name duration </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">timing-function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delay </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iteration-count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> direction </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">fill-mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>可以看到，书写的属性顺序为：动画名字、持续时间、速度曲线、延迟时间、播放次数、播放方向、填充模式。</p><p>不需要的属性我们可以直接省略，但是顺序不能改变。</p>`,31),l=[e];function h(o,k,r,p,d,c){return s(),a("div",null,l)}const g=i(t,[["render",h]]);export{m as __pageData,g as default};
