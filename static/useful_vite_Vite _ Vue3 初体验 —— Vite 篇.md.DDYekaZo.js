import{_ as i,l as s,k as a,ae as t}from"./chunks/framework.BFFW23Ds.js";const g=JSON.parse('{"title":"Vite + Vue3 初体验 —— Vite 篇","description":"","frontmatter":{"label":"vite"},"headers":[{"level":2,"title":"上手","slug":"上手","link":"#上手","children":[]},{"level":2,"title":"启动项目","slug":"启动项目","link":"#启动项目","children":[]},{"level":2,"title":"查看本地运行的模块","slug":"查看本地运行的模块","link":"#查看本地运行的模块","children":[]}],"relativePath":"useful/vite/Vite + Vue3 初体验 —— Vite 篇.md","filePath":"useful/vite/Vite + Vue3 初体验 —— Vite 篇.md","lastUpdated":1709816942000}'),l={name:"useful/vite/Vite + Vue3 初体验 —— Vite 篇.md"},n=t(`<h1 id="vite-vue3-初体验-——-vite-篇" tabindex="-1">Vite + Vue3 初体验 —— Vite 篇 <a class="header-anchor" href="#vite-vue3-初体验-——-vite-篇" aria-label="Permalink to &quot;Vite + Vue3 初体验 —— Vite 篇&quot;">​</a></h1><h2 id="上手" tabindex="-1">上手 <a class="header-anchor" href="#上手" aria-label="Permalink to &quot;上手&quot;">​</a></h2><p>直接运行 <code>npm create vite@latest</code> 命令即可。</p><p><code>npm create</code> 是 <code>npm init</code> 的别名，如果不带上 <code>&lt;initializer&gt;</code>，他们的作用都是生成 package.json 文件。</p><p>如果他们的后面带上一个 <code>&lt;initializer&gt;</code>：（这里以 npm create initializer 举例）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>那么它的意图与执行下面的脚本的是一样的：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>也等同于</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;initializer&gt;</span></span></code></pre></div><p>输入命令后，需要添加项目名称和技术栈，可以看到可供选择的技术栈有这么几种（如下图） <img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/2023-07-08-18-34-44.png" alt="" loading="lazy"></p><p>vite 支持的框架有 6 种：</p><ul><li>vanilla：Vanilla JS 是一个快速、轻量级、跨平台的 JavaScript 框架。Vanilla JS 是世界上最轻量的 JavaScript 框架（没有之一）其实这玩意就是原生 JS。</li><li>vue/react：这两个应该不用过多介绍了吧。</li><li>preact：React 的轻量级替代方案。</li><li>lit：Lit 是一个简单的库，用于构建快速、轻量级的 Web 组件。（看了一眼语法，感觉还挺好玩的。）</li><li>svelte：一个不使用 Virtual DOM 的库 —— 真酷。这个库的作者和 Rollup 的作者是同一人。</li><li>solid：不知道</li><li>Qwik：不知道</li><li>Others：其它</li></ul><p>这里我选了 vue + ts 进行创建。</p><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/2023-07-08-18-38-33.png" alt="" loading="lazy"></p><p>现在来看看，这个新建的项目目录长啥样吧。（如下图）</p><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/2023-07-08-18-39-09.png" alt="" loading="lazy"></p><p>和用 vue-cli 初始化的目录有两处不同：</p><ol><li>index.html 入口文件被移到了根目录下。官方解释是：在开发期间 Vite 是一个服务器，而 index.html 是该 Vite 项目的入口文件。</li><li>vite.config.ts 替代了 vue.config.js，作为 vite 项目的配置文件。</li></ol><p>接下来，我们看看 package.json 的内容吧。（如下）</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite-project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;private&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite preview&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^3.3.4&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@vitejs/plugin-vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.2.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^5.0.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.4.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vue-tsc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.8.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>从上面可以看出，使用 Vite 初始化的 Vue 项目，Vue 的版本已经是最新的 Vue3 了。而开发时依赖也从 vue-cli/webpack 系列切换到了 vite 系列。</p><h2 id="启动项目" tabindex="-1">启动项目 <a class="header-anchor" href="#启动项目" aria-label="Permalink to &quot;启动项目&quot;">​</a></h2><p>在体验 Vue3 新语法之前，先把项目启动，看看效果吧。</p><p>在使用 npm i 安装完依赖后，使用 npm run dev 即可启动 本地开发 模式了。</p><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/2023-07-08-18-42-28.png" alt="" loading="lazy"></p><p>刚运行项目，启动速度着实让我吃了一惊。</p><p>这比 Vue2 初始化的项目启动也快太多了，刚一眨眼项目就已经启动了。</p><p>当然，我们从它的介绍可以得知，这是因为在本地开发时，Vite 使用了 原生 ES 模块，所以期间没有涉及模块编译过程，节约了不少时间。</p><h2 id="查看本地运行的模块" tabindex="-1">查看本地运行的模块 <a class="header-anchor" href="#查看本地运行的模块" aria-label="Permalink to &quot;查看本地运行的模块&quot;">​</a></h2><p>我们打开控制台，先看看我们的 html 文件。（如下图）</p><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/2023-07-08-18-44-11.png" alt="" loading="lazy"></p><p>从上面可以看出，html 中引入了 main.ts，也就是我们这个项目的入口文件。（如下图）</p><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/2023-07-08-18-45-14.png" alt="" loading="lazy"></p><p>从上面这张图可以看出，代码还是原生的 import，没有经过任何转译。</p><p>但是，在这里我看到请求的资源，有 ts 还有 vue。</p><p>难道谷歌浏览器已经支持直接加载 ts 和 vue 文件了吗？其实并不是，这里的奥妙之处来自于文件的响应头 —— Content-Type，这决定了浏览器以什么样的方式处理该文件。（如下图）</p><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/2023-07-08-18-47-45.png" alt="" loading="lazy"></p><p>App.vue 的 Contetn-Type 也是 application/javascript。</p><p>如果你点开其他 .vue 文件可以看出，.vue 文件还是经过编译，成为了可供浏览器识别的 js 类型，但模块还是使用了谷歌浏览器支持的 原生 ES 模块。（如下图）</p><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/2023-07-08-18-49-40.png" alt="" loading="lazy"></p>`,41),p=[n];function e(h,k,o,c,r,d){return a(),s("div",null,p)}const E=i(l,[["render",e]]);export{g as __pageData,E as default};
