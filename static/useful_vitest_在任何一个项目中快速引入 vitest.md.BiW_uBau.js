import{_ as s,l as i,k as a,ae as t}from"./chunks/framework.BFFW23Ds.js";const g=JSON.parse('{"title":"在任何一个项目中快速引入 vitest","description":"","frontmatter":{"label":["vitest","vite"]},"headers":[{"level":2,"title":"1 先下载依赖","slug":"_1-先下载依赖","link":"#_1-先下载依赖","children":[]},{"level":2,"title":"2 创建 vitest 的专属配置文件","slug":"_2-创建-vitest-的专属配置文件","link":"#_2-创建-vitest-的专属配置文件","children":[]},{"level":2,"title":"3 然后配置一下脚本","slug":"_3-然后配置一下脚本","link":"#_3-然后配置一下脚本","children":[]},{"level":2,"title":"4 可以在 *.{test, spec}.{js, ts} 文件中写测试代码了","slug":"_4-可以在-test-spec-js-ts-文件中写测试代码了","link":"#_4-可以在-test-spec-js-ts-文件中写测试代码了","children":[]},{"level":2,"title":"5 执行脚本 test-once","slug":"_5-执行脚本-test-once","link":"#_5-执行脚本-test-once","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"useful/vitest/在任何一个项目中快速引入 vitest.md","filePath":"useful/vitest/在任何一个项目中快速引入 vitest.md","lastUpdated":1709394628000}'),e={name:"useful/vitest/在任何一个项目中快速引入 vitest.md"},n=t(`<h1 id="在任何一个项目中快速引入-vitest" tabindex="-1">在任何一个项目中快速引入 vitest <a class="header-anchor" href="#在任何一个项目中快速引入-vitest" aria-label="Permalink to &quot;在任何一个项目中快速引入 vitest&quot;">​</a></h1><p>假设这里存在一个项目，如何把 vitest 引入到这个项目中使用呢？下面给出一些步骤。</p><h2 id="_1-先下载依赖" tabindex="-1">1 先下载依赖 <a class="header-anchor" href="#_1-先下载依赖" aria-label="Permalink to &quot;1 先下载依赖&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><p>要使用 vitest，最少<strong>下一个包</strong>：vitest。</p><p>如图 package.json：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;vitest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-创建-vitest-的专属配置文件" tabindex="-1">2 创建 vitest 的专属配置文件 <a class="header-anchor" href="#_2-创建-vitest-的专属配置文件" aria-label="Permalink to &quot;2 创建 vitest 的专属配置文件&quot;">​</a></h2><p>在项目根目录中创建 <code>vitest.config.ts</code> 文件：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试那些在项目根目录下的 test 目录下的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    include: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test/*.{test,spec}.?(c|m)[jt]s?(x)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="_3-然后配置一下脚本" tabindex="-1">3 然后配置一下脚本 <a class="header-anchor" href="#_3-然后配置一下脚本" aria-label="Permalink to &quot;3 然后配置一下脚本&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test-once&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitest run&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><ul><li>vitest 命令会在文件更改后，重新启动测试，相当于添加了 watch 选项。</li><li>vitest run 命令只会启动一次测试。</li></ul><h2 id="_4-可以在-test-spec-js-ts-文件中写测试代码了" tabindex="-1">4 可以在 *.{test, spec}.{js, ts} 文件中写测试代码了 <a class="header-anchor" href="#_4-可以在-test-spec-js-ts-文件中写测试代码了" aria-label="Permalink to &quot;4 可以在 *.{test, spec}.{js, ts} 文件中写测试代码了&quot;">​</a></h2><p>比如我在项目的某个目录下创建了一个 <code>a.spec.ts</code> 文件，写入如下测试代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { describe, it, expect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1 + 1 = 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="_5-执行脚本-test-once" tabindex="-1">5 执行脚本 <code>test-once</code> <a class="header-anchor" href="#_5-执行脚本-test-once" aria-label="Permalink to &quot;5 执行脚本 \`test-once\`&quot;">​</a></h2><p>如果出现像下面这样的控制台界面，说明该项目就成功引入 vitest 了！</p><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/2023-06-15-23-06-20.png" alt="" loading="lazy"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在一个项目中快速引入 viest：</p><ul><li>下载 <code>vitest</code> 依赖</li><li>创建 <code>vitest.config.ts</code> 配置文件</li><li>创建测试文件写测试代码</li></ul>`,22),l=[n];function h(p,k,d,r,c,o){return a(),i("div",null,l)}const u=s(e,[["render",h]]);export{g as __pageData,u as default};
