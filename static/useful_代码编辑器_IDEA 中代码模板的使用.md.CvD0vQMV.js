import{_ as e,l as a,k as l,ae as i}from"./chunks/framework.BFFW23Ds.js";const _=JSON.parse('{"title":"IDEA 中代码模板的使用","description":"","frontmatter":{},"headers":[{"level":2,"title":"后缀补全（Postfix Completion）模板","slug":"后缀补全-postfix-completion-模板","link":"#后缀补全-postfix-completion-模板","children":[]},{"level":2,"title":"实时代码模板（Live Templates）","slug":"实时代码模板-live-templates","link":"#实时代码模板-live-templates","children":[]},{"level":2,"title":"常用代码模板","slug":"常用代码模板","link":"#常用代码模板","children":[]},{"level":2,"title":"自定义代码模板","slug":"自定义代码模板","link":"#自定义代码模板","children":[{"level":3,"title":"自定义后缀补全模板","slug":"自定义后缀补全模板","link":"#自定义后缀补全模板","children":[]},{"level":3,"title":"自定义 Live Templates","slug":"自定义-live-templates","link":"#自定义-live-templates","children":[]}]}],"relativePath":"useful/代码编辑器/IDEA 中代码模板的使用.md","filePath":"useful/代码编辑器/IDEA 中代码模板的使用.md","lastUpdated":1713791748000}'),t={name:"useful/代码编辑器/IDEA 中代码模板的使用.md"},s=i('<h1 id="idea-中代码模板的使用" tabindex="-1">IDEA 中代码模板的使用 <a class="header-anchor" href="#idea-中代码模板的使用" aria-label="Permalink to &quot;IDEA 中代码模板的使用&quot;">​</a></h1><h2 id="后缀补全-postfix-completion-模板" tabindex="-1">后缀补全（Postfix Completion）模板 <a class="header-anchor" href="#后缀补全-postfix-completion-模板" aria-label="Permalink to &quot;后缀补全（Postfix Completion）模板&quot;">​</a></h2><p>设置项所在位置。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/java/idea_postfix1.png"><p>后缀补全示例：</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/java/idea_postfix.png"><h2 id="实时代码模板-live-templates" tabindex="-1">实时代码模板（Live Templates） <a class="header-anchor" href="#实时代码模板-live-templates" aria-label="Permalink to &quot;实时代码模板（Live Templates）&quot;">​</a></h2><p>它的原理就是配置一些常用代码字母缩写，在输入简写时可以出现你预定义的固定模式的代码，使得开发效率大大提高，同时也可以增加个性化。最简单的例子就是在 Java 中输入 sout 会出现 <code>System.out.println();</code>。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/java/idea_template.png"><h2 id="常用代码模板" tabindex="-1">常用代码模板 <a class="header-anchor" href="#常用代码模板" aria-label="Permalink to &quot;常用代码模板&quot;">​</a></h2><p>输出语句：</p><ul><li>sout：相当于 System.out.println</li><li>soutm：打印当前方法的名称</li><li>soutp：打印当前方法的形参及形参对应的实参值</li><li>soutv：打印方法中声明的最近的变量的值</li><li>变量.sout：打印当前变量值</li><li>变量.soutv：打印当前变量名及变量值</li></ul><h2 id="自定义代码模板" tabindex="-1">自定义代码模板 <a class="header-anchor" href="#自定义代码模板" aria-label="Permalink to &quot;自定义代码模板&quot;">​</a></h2><h3 id="自定义后缀补全模板" tabindex="-1">自定义后缀补全模板 <a class="header-anchor" href="#自定义后缀补全模板" aria-label="Permalink to &quot;自定义后缀补全模板&quot;">​</a></h3><p>先设置在哪种类型文件里会有后缀补全提示。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/java/idea_template2.png"><p>然后：</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/java/idea_template3.png"><p>在 .java 文件里就可以使用 xxx.hello 的后缀代码补全啦。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/java/idea_template4.png"><h3 id="自定义-live-templates" tabindex="-1">自定义 Live Templates <a class="header-anchor" href="#自定义-live-templates" aria-label="Permalink to &quot;自定义 Live Templates&quot;">​</a></h3><p>步骤和自定义后缀补全模板差不多。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/java/idea_template5.png"><ul><li>Abbreviation：模板的缩略名称</li><li>Description：模板的描述</li><li>Template text：模板的代码片段</li><li>Applicable in：模板应用范围</li></ul><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/java/idea_template6.png">',25),o=[s];function c(p,n,r,u,h,m){return l(),a("div",null,o)}const v=e(t,[["render",c]]);export{_ as __pageData,v as default};
