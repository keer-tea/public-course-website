import{_ as i,l as s,k as t,ae as a}from"./chunks/framework.BFFW23Ds.js";const c=JSON.parse('{"title":"vite 随想","description":"","frontmatter":{"label":"vite"},"headers":[{"level":2,"title":"其它","slug":"其它","link":"#其它","children":[]}],"relativePath":"useful/vite/vite 随想.md","filePath":"useful/vite/vite 随想.md","lastUpdated":1709394628000}'),e={name:"useful/vite/vite 随想.md"},l=a(`<h1 id="vite-随想" tabindex="-1">vite 随想 <a class="header-anchor" href="#vite-随想" aria-label="Permalink to &quot;vite 随想&quot;">​</a></h1><h2 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h2><ul><li><p>为什么能在 vite 项目中直接创建 ts 文件，写 ts 代码？ 因为 vite 会使用 esbuild 将 ts 文件转换为 js 文件，但是它只是转换，并不进行类型检查。</p></li><li><p>index.html 中的 URL 以斜杠 <code>/</code> 开头，代表项目根目录，并且将被自动转换，不需要 %PUBLIC_URL% 占位符。</p></li><li><p>vite 能解析处于项目根目录外的文件。</p></li><li><p>vite 默认是以当前工作目录（vscode 打开的目录）作为项目根目录的。也可以通过 <code>vite serve some/sub/dir</code> 的方式指定某个目录为项目根目录。项目根目录下存放有 vite.config.ts 文件。</p></li><li><p>启动 vite 项目的脚本别名</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动开发服务器，别名：\`vite dev\`，\`vite serve\`</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为生产环境构建产物</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite preview&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 本地预览生产构建产物</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>vite 为什么这么快？</p><p>webpack 启动必须优先抓取并构建你的整个应用，然后才能提供服务。</p><p>Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p></li></ul>`,3),n=[l];function h(p,k,d,o,r,E){return t(),s("div",null,n)}const v=i(e,[["render",h]]);export{c as __pageData,v as default};
