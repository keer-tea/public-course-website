import{_ as a,l,k as e,ae as i}from"./chunks/framework.BFFW23Ds.js";const m=JSON.parse('{"title":"01 数据库概述","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么要使用数据库","slug":"为什么要使用数据库","link":"#为什么要使用数据库","children":[]},{"level":2,"title":"数据库与数据库管理系统","slug":"数据库与数据库管理系统","link":"#数据库与数据库管理系统","children":[{"level":3,"title":"数据库的相关概念","slug":"数据库的相关概念","link":"#数据库的相关概念","children":[]},{"level":3,"title":"数据库与数据库管理系统的关系","slug":"数据库与数据库管理系统的关系","link":"#数据库与数据库管理系统的关系","children":[]},{"level":3,"title":"常见的数据库介绍","slug":"常见的数据库介绍","link":"#常见的数据库介绍","children":[]}]},{"level":2,"title":"MySQL 介绍","slug":"mysql-介绍","link":"#mysql-介绍","children":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"MySQL 发展史重大事件","slug":"mysql-发展史重大事件","link":"#mysql-发展史重大事件","children":[]},{"level":3,"title":"关于 MySQL 8.0","slug":"关于-mysql-8-0","link":"#关于-mysql-8-0","children":[]}]},{"level":2,"title":"RDBMS 与 非 RDBMS","slug":"rdbms-与-非-rdbms","link":"#rdbms-与-非-rdbms","children":[{"level":3,"title":"关系型数据库 (RDBMS)","slug":"关系型数据库-rdbms","link":"#关系型数据库-rdbms","children":[]},{"level":3,"title":"非关系型数据库 (非 RDBMS)","slug":"非关系型数据库-非-rdbms","link":"#非关系型数据库-非-rdbms","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"关系型数据库设计规则","slug":"关系型数据库设计规则","link":"#关系型数据库设计规则","children":[{"level":3,"title":"表、记录、字段","slug":"表、记录、字段","link":"#表、记录、字段","children":[]},{"level":3,"title":"表的关联关系","slug":"表的关联关系","link":"#表的关联关系","children":[]}]}],"relativePath":"javadoc/MySql/01 数据库概述.md","filePath":"javadoc/MySql/01 数据库概述.md","lastUpdated":1709816942000}'),s={name:"javadoc/MySql/01 数据库概述.md"},t=i(`<h1 id="_01-数据库概述" tabindex="-1">01 数据库概述 <a class="header-anchor" href="#_01-数据库概述" aria-label="Permalink to &quot;01 数据库概述&quot;">​</a></h1><h2 id="为什么要使用数据库" tabindex="-1">为什么要使用数据库 <a class="header-anchor" href="#为什么要使用数据库" aria-label="Permalink to &quot;为什么要使用数据库&quot;">​</a></h2><ul><li><p>持久化 (persistence)：把数据保存到可掉电式存储设备中以供之后使用。大多数情况下，特别是企 业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化”，而持久化的实现过程大多 通过各种关系数据库来完成。</p></li><li><p>持久化的主要作用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML 数 据文件中。</p></li></ul><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql1.png"><p>生活中的例子：</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql2.png"><h2 id="数据库与数据库管理系统" tabindex="-1">数据库与数据库管理系统 <a class="header-anchor" href="#数据库与数据库管理系统" aria-label="Permalink to &quot;数据库与数据库管理系统&quot;">​</a></h2><h3 id="数据库的相关概念" tabindex="-1">数据库的相关概念 <a class="header-anchor" href="#数据库的相关概念" aria-label="Permalink to &quot;数据库的相关概念&quot;">​</a></h3><p><strong>DB：数据库（Database）</strong></p><p>即存储数据的“仓库”，其本质是一个文件系统。它保存了一系列有组织的数据。</p><p><strong>DBMS：数据库管理系统（Database Management System）</strong></p><p>是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控 制。用户通过数据库管理系统访问数据库中表内的数据。</p><p><strong>SQL：结构化查询语言（Structured Query Language）</strong></p><p>专门用来与数据库通信的语言。</p><h3 id="数据库与数据库管理系统的关系" tabindex="-1">数据库与数据库管理系统的关系 <a class="header-anchor" href="#数据库与数据库管理系统的关系" aria-label="Permalink to &quot;数据库与数据库管理系统的关系&quot;">​</a></h3><p>数据库管理系统 (DBMS) 可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存 应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。</p><h3 id="常见的数据库介绍" tabindex="-1">常见的数据库介绍 <a class="header-anchor" href="#常见的数据库介绍" aria-label="Permalink to &quot;常见的数据库介绍&quot;">​</a></h3><p><strong>Oracle</strong></p><p>1979 年，Oracle 2 诞生，它是第一个商用的 RDBMS（关系型数据库管理系统）。随着 Oracle 软件的名气 越来越大，公司也改名叫 Oracle 公司。</p><p>2007 年，总计 85 亿美金收购 BEA Systems。</p><p>2009 年，总计 74 亿美金收购 SUN。此前的 2008 年，SUN 以 10 亿美金收购 MySQL。意味着 Oracle 同时拥有了 MySQL 的管理权，至此 Oracle 在数据库领域中成为绝对的领导者。</p><p>2013 年，甲骨文超越 IBM，成为继 Microsoft 后全球第二大软件公司。</p><p>如今 Oracle 的年收入达到了 400 亿美金，足以证明商用（收费）数据库软件的价值。</p><p><strong>SQL Server</strong></p><p>SQL Server 是微软开发的大型商业数据库，诞生于 1989 年。C#、.net 等语言常使用，与 WinNT 完全集 成，也可以很好地与 Microsoft BackOffice 产品集成。</p><p><strong>DB2</strong></p><p>IBM 公司的数据库产品，收费的。常应用在银行系统中。</p><p><strong>PostgreSQL</strong></p><p>PostgreSQL 的稳定性极强，最符合 SQL 标准，开放源码，具备商业级 DBMS 质量。PG 对数据量大的文本以 及 SQL 处理较快。</p><p><strong>SQLite</strong></p><p>嵌入式的小型数据库，应用在手机端。零配置，SQlite3 不用安装，不用配置，不用启动，关闭或者配置 数据库实例。当系统崩溃后不用做任何恢复操作，再下次使用数据库的时候自动恢复。</p><p><strong>informix</strong></p><p>IBM 公司出品，取自 Information 和 Unix 的结合，它是第一个被移植到 Linux 上的商业数据库产品。仅运行 于 unix/linux 平台，命令行操作。性能较高，支持集群，适应于安全性要求极高的系统，尤其是银行，证 券系统的应用。</p><h2 id="mysql-介绍" tabindex="-1">MySQL 介绍 <a class="header-anchor" href="#mysql-介绍" aria-label="Permalink to &quot;MySQL 介绍&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ul><li>MySQL 是一个 开放源代码的关系型数据库管理系统，由瑞典 MySQL AB（创始人 Michael Widenius）公 司 1995 年开发，迅速成为开源数据库的 No.1。</li><li>2008 被 Sun 收购（10 亿美金），2009 年 Sun 被 Oracle 收购。MariaDB 应运而生。（MySQL 的创 造者担心 MySQL 有闭源的风险，因此创建了 MySQL 的分支项目 MariaDB）</li><li>MySQL6.x 版本之后分为 社区版 和 商业版。</li><li>MySQL 是一种关联数据库管理系统，将数据保存在不同的表中，而不是将所有数据放在一个大仓库 内，这样就增加了速度并提高了灵活性。</li><li>MySQL 是开源的，所以你不需要支付额外的费用。</li><li>MySQL 是可以定制的，采用了 GPL（GNU General Public License）协议，你可以修改源码来 开发自己的 MySQL 系统。</li><li>MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系 统支持最大的表文件为 8TB。</li><li>MySQL 使用 标准的 SQL 数据语言 形式。</li><li>MySQL 可以允许运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、 Java、Perl、PHP 和 Ruby 等。</li></ul><h3 id="mysql-发展史重大事件" tabindex="-1">MySQL 发展史重大事件 <a class="header-anchor" href="#mysql-发展史重大事件" aria-label="Permalink to &quot;MySQL 发展史重大事件&quot;">​</a></h3><p>MySQL 的历史就是整个互联网的发展史。互联网业务从社交领域、电商领域到金融领域的发展，推动着 应用对数据库的需求提升，对传统的数据库服务能力提出了挑战。高并发、高性能、高可用、轻资源、 易维护、易扩展的需求，促进了 MySQL 的长足发展。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql3.png"><h3 id="关于-mysql-8-0" tabindex="-1">关于 MySQL 8.0 <a class="header-anchor" href="#关于-mysql-8-0" aria-label="Permalink to &quot;关于 MySQL 8.0&quot;">​</a></h3><p>MySQL 从 5.7 版本直接跳跃发布了 8.0 版本，可见这是一个令人兴奋的里程碑版本。MySQL 8 版本在功能上 做了显著的改进与增强，开发者对 MySQL 的源代码进行了重构，最突出的一点是多 MySQL Optimizer 优化 器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p><h2 id="rdbms-与-非-rdbms" tabindex="-1">RDBMS 与 非 RDBMS <a class="header-anchor" href="#rdbms-与-非-rdbms" aria-label="Permalink to &quot;RDBMS 与 非 RDBMS&quot;">​</a></h2><p>从排名中我们能看出来，关系型数据库绝对是 DBMS 的主流，其中使用最多的 DBMS 分别是 Oracle、 MySQL 和 SQL Server。这些都是关系型数据库（RDBMS）。</p><h3 id="关系型数据库-rdbms" tabindex="-1">关系型数据库 (RDBMS) <a class="header-anchor" href="#关系型数据库-rdbms" aria-label="Permalink to &quot;关系型数据库 (RDBMS)&quot;">​</a></h3><h4 id="实质" tabindex="-1">实质 <a class="header-anchor" href="#实质" aria-label="Permalink to &quot;实质&quot;">​</a></h4><p>这种类型的数据库是 最古老 的数据库类型，关系型数据库模型是把复杂的数据结构归结为简单的 二元关系（即二维表格形式）。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql4.png"><p>关系型数据库以 行 (row) 和 列 (column) 的形式存储数据，以便于用户理解。这一系列的行和列被称为表 (table) ，一组表组成了一个库 (database)。</p><p>表与表之间的数据记录有关系 (relationship)。现实世界中的各种实体以及实体之间的各种联系均用 关系模型 来表示。关系型数据库，就是建立在 关系模型 基础上的数据库。</p><p>SQL 就是关系型数据库的查询语言。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql5.png"><h4 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h4><ul><li>复杂查询，可以用 SQL 语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li>事务支持 使得对于安全性能很高的数据访问要求得以实现。</li></ul><h3 id="非关系型数据库-非-rdbms" tabindex="-1">非关系型数据库 (非 RDBMS) <a class="header-anchor" href="#非关系型数据库-非-rdbms" aria-label="Permalink to &quot;非关系型数据库 (非 RDBMS)&quot;">​</a></h3><h4 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h4><p>非关系型数据库，可看成传统关系型数据库的功能 阉割版本，基于键值对存储数据，不需要经过 SQL 层 的解析，性能非常高。同时，通过减少不常用的功能，进一步提高性能。</p><p>目前基本上大部分主流的非关系型数据库都是免费的。</p><h4 id="有哪些非关系型数据库" tabindex="-1">有哪些非关系型数据库 <a class="header-anchor" href="#有哪些非关系型数据库" aria-label="Permalink to &quot;有哪些非关系型数据库&quot;">​</a></h4><p>相比于 SQL，NoSQL 泛指非关系型数据库，包括了榜单上的键值型数据库、文档型数据库、搜索引擎和 列存储等，除此以外还包括图形数据库。也只有用 NoSQL 一词才能将这些技术囊括进来。</p><p><strong>键值型数据库</strong></p><p>键值型数据库通过 Key-Value 键值的方式来存储数据，其中 Key 和 Value 可以是简单的对象，也可以是复 杂的对象。Key 作为唯一的标识符，优点是查找速度快，在这方面明显优于关系型数据库，缺点是无法 像关系型数据库一样使用条件过滤（比如 WHERE），如果你不知道去哪里找数据，就要遍历所有的键， 这就会消耗大量的计算。</p><p>键值型数据库典型的使用场景是作为 内存缓存。Redis 是最流行的键值型数据库。</p><p><strong>文档型数据库</strong></p><p>此类数据库可存放并获取文档，可以是 XML、JSON 等格式。在数据库中文档作为处理信息的基本单位， 一个文档就相当于一条记录。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。MongoDB 是最流行的文档型数据库。此外，还有 CouchDB 等。</p><p><strong>搜索引擎数据库</strong></p><p>虽然关系型数据库采用了索引提升检索效率，但是针对全文索引效率却较低。搜索引擎数据库是应用在 搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检 索的时候才能保证性能最优。核心原理是“倒排索引”。 典型产品：Solr、Elasticsearch、Splunk 等。</p><p><strong>列式数据库</strong></p><p>列式数据库是相对于行式存储的数据库，Oracle、MySQL、SQL Server 等数据库都是采用的行式存储 （Row-based），而列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的 I/O，适合于分布式文件系统，不足在于功能相对有限。典型产品：HBase 等。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql6.png"><p><strong>图形数据库</strong></p><p>图形数据库，利用了图这种数据结构存储了实体（对象）之间的关系。图形数据库最典型的例子就是社 交网络中人与人的关系，数据模型主要是以节点和边（关系）来实现，特点在于能高效地解决复杂的关 系问题。</p><p>图形数据库顾名思义，就是一种存储图形关系的数据库。它利用了图这种数据结构存储了实体（对象） 之间的关系。关系型数据用于存储明确关系的数据，但对于复杂关系的数据存储却有些力不从心。如社 交网络中人物之间的关系，如果用关系型数据库则非常复杂，用图形数据库将非常简单。典型产品： Neo4J、InfoGrid 等。</p><h4 id="nosql-的演变" tabindex="-1">NoSQL 的演变 <a class="header-anchor" href="#nosql-的演变" aria-label="Permalink to &quot;NoSQL 的演变&quot;">​</a></h4><p>由于 SQL 一直称霸 DBMS，因此许多人在思考是否有一种数据库技术能远离 SQL，于是 NoSQL 诞生了， 但是随着发展却发现越来越离不开 SQL。到目前为止 NoSQL 阵营中的 DBMS 都会有实现类似 SQL 的功 能。下面是“NoSQL”这个名词在不同时期的诠释，从这些释义的变化中可以看出 NoSQL 功能的演变：</p><p>1970: NoSQL = We have no SQL</p><p>1980: NoSQL = Know SQL</p><p>2000: NoSQL = No SQL!</p><p>2005: NoSQL = Not only SQL</p><p>2013: NoSQL = No, SQL!</p><p>NoSQL 对 SQL 做出了很好的补充，比如实际开发中，有很多业务需求，其实并不需要完整的关系型数据 库功能，非关系型数据库的功能就足够使用了。这种情况下，使用 性能更高、成本更低 的非关系型数据 库当然是更明智的选择。比如：日志收集、排行榜、定时器等。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>NoSQL 的分类很多，即便如此，在 DBMS 排名中，还是 SQL 阵营的比重更大，影响力前 5 的 DBMS 中有 4 个是关系型数据库，而排名前 20 的 DBMS 中也有 12 个是关系型数据库。所以说，掌握 SQL 是非常有 必要的。整套课程将围绕 SQL 展开。</p><h2 id="关系型数据库设计规则" tabindex="-1">关系型数据库设计规则 <a class="header-anchor" href="#关系型数据库设计规则" aria-label="Permalink to &quot;关系型数据库设计规则&quot;">​</a></h2><ul><li>关系型数据库的典型数据结构就是 数据表，这些数据表的组成都是结构化的（Structured）。</li><li>将数据放到表中，表再放到库中。</li><li>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</li><li>表具有一些特性，这些特性定义了数据在表中如何存储，类似 Java 和 Python 中“类”的设计。</li></ul><h3 id="表、记录、字段" tabindex="-1">表、记录、字段 <a class="header-anchor" href="#表、记录、字段" aria-label="Permalink to &quot;表、记录、字段&quot;">​</a></h3><ul><li>E-R（entity-relationship，实体 - 联系）模型中有三个主要概念是：实体集、属性、联系集。</li><li>一个实体集（class）对应于数据库中的一个表（table），一个实体（instance）则对应于数据库表 中的一行（row），也称为一条记录（record）。一个属性（attribute）对应于数据库表中的一列 （column），也称为一个字段（field）。</li></ul><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql7.png"><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ORM思想 (Object Relational Mapping)体现：</span></span>
<span class="line"><span>数据库中的一个表  &lt;---&gt; Java或Python中的一个类</span></span>
<span class="line"><span>表中的一条数据  &lt;---&gt; 类中的一个对象（或实体）</span></span>
<span class="line"><span>表中的一个列  &lt;----&gt; 类中的一个字段、属性(field)</span></span></code></pre></div><h3 id="表的关联关系" tabindex="-1">表的关联关系 <a class="header-anchor" href="#表的关联关系" aria-label="Permalink to &quot;表的关联关系&quot;">​</a></h3><ul><li>表与表之间的数据记录有关系 (relationship)。现实世界中的各种实体以及实体之间的各种联系均用 关系模型来表示。</li><li>四种：一对一关联、一对多关联、多对多关联、自我引用</li></ul><h4 id="一对一关联-one-to-one" tabindex="-1">一对一关联（one-to-one） <a class="header-anchor" href="#一对一关联-one-to-one" aria-label="Permalink to &quot;一对一关联（one-to-one）&quot;">​</a></h4><p>在实际的开发中应用不多，因为一对一其实可以合并成一张表。</p><p>举例：设计 学生表：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急 联系人、...</p><p>拆为两个表：两个表的记录是一一对应关系。</p><ul><li>基础信息表（常用信息）：学号、姓名、手机号码、班级、系别</li><li>档案信息表（不常用信息）：学号、身份证号码、家庭住址、籍贯、紧急联系人、...</li></ul><p>两种建表原则：</p><ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql8.png"><h4 id="一对多关系-one-to-many" tabindex="-1">一对多关系（one-to-many） <a class="header-anchor" href="#一对多关系-one-to-many" aria-label="Permalink to &quot;一对多关系（one-to-many）&quot;">​</a></h4><p>-常见实例场景：客户表和订单表，分类表和商品表，部门表和员工表。</p><p>举例：</p><ul><li>员工表：编号、姓名、...、所属部门</li><li>部门表：编号、名称、简介</li></ul><p>一对多建表原则：在从表 (多方) 创建一个字段，字段作为外键指向主表 (一方) 的主键：</p><h4 id="多对多-many-to-many" tabindex="-1">多对多（many-to-many） <a class="header-anchor" href="#多对多-many-to-many" aria-label="Permalink to &quot;多对多（many-to-many）&quot;">​</a></h4><p>要表示多对多关系，必须创建第三个表，该表通常称为 联接表，它将多对多关系划分为两个一对多关 系。将这两个表的主键都插入到第三个表中。</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql9.png"><p><strong>举例 1：学生 - 课程</strong></p><ul><li>学生信息表：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别...）</li><li>课程信息表：一行代表一个课程的信息（课程编号、授课老师、简介...）</li><li>选课信息表：一个学生可以选多门课，一门课可以被多个学生选择</li></ul><p><strong>举例 2：产品 - 订单</strong></p><p>“订单”表和“产品”表有一种多对多的关系，这种关系是通过与“订单明细”表建立两个一对多关系来 定义的。一个订单可以有多个产品，每个产品可以出现在多个订单中。</p><ul><li>产品表：“产品”表中的每条记录表示一个产品。</li><li>订单表：“订单”表中的每条记录表示一个订单。</li><li>订单明细表：每个产品可以与“订单”表中的多条记录对应，即出现在多个订单中。一个订单 可以与“产品”表中的多条记录对应，即包含多个产品。</li></ul><p><strong>举例 3：用户 - 角色</strong></p><p>多对多关系建表原则：需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向 各自一方的主键。</p><h4 id="自我引用-self-reference" tabindex="-1">自我引用 (Self reference) <a class="header-anchor" href="#自我引用-self-reference" aria-label="Permalink to &quot;自我引用 (Self reference)&quot;">​</a></h4><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/sql/sql10.png">`,115),n=[t];function r(o,p,c,h,u,d){return e(),l("div",null,n)}const b=a(s,[["render",r]]);export{m as __pageData,b as default};
