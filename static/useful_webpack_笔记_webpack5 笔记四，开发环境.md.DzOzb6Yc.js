import{_ as a,l as s,k as e,ae as i}from"./chunks/framework.BFFW23Ds.js";const b=JSON.parse('{"title":"webpack5 笔记四，开发环境","description":"","frontmatter":{"label":["webpack"]},"headers":[{"level":2,"title":"如何跟踪打包后的文件的错误","slug":"如何跟踪打包后的文件的错误","link":"#如何跟踪打包后的文件的错误","children":[]},{"level":2,"title":"如何提高开发效率？","slug":"如何提高开发效率","link":"#如何提高开发效率","children":[{"level":3,"title":"方法一，--watch","slug":"方法一-watch","link":"#方法一-watch","children":[]}]},{"level":2,"title":"方法二，webpack-dev-server","slug":"方法二-webpack-dev-server","link":"#方法二-webpack-dev-server","children":[]}],"relativePath":"useful/webpack/笔记/webpack5 笔记四，开发环境.md","filePath":"useful/webpack/笔记/webpack5 笔记四，开发环境.md","lastUpdated":1709394628000}'),t={name:"useful/webpack/笔记/webpack5 笔记四，开发环境.md"},l=i(`<h1 id="webpack5-笔记四-开发环境" tabindex="-1">webpack5 笔记四，开发环境 <a class="header-anchor" href="#webpack5-笔记四-开发环境" aria-label="Permalink to &quot;webpack5 笔记四，开发环境&quot;">​</a></h1><p>本篇我们将学到以下：</p><ol><li>如何跟踪打包后的文件的错误</li><li>如何提高开发效率？</li></ol><h2 id="如何跟踪打包后的文件的错误" tabindex="-1">如何跟踪打包后的文件的错误 <a class="header-anchor" href="#如何跟踪打包后的文件的错误" aria-label="Permalink to &quot;如何跟踪打包后的文件的错误&quot;">​</a></h2><p>配置 devtool 选项，在有错误时浏览器能精确的提示出错误以及位置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">devtool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;source-map&#39;</span></span></code></pre></div><p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/img/4166896e53ed4df0b211d98ac8ef33fc.png" alt="" loading="lazy"></p><h2 id="如何提高开发效率" tabindex="-1">如何提高开发效率？ <a class="header-anchor" href="#如何提高开发效率" aria-label="Permalink to &quot;如何提高开发效率？&quot;">​</a></h2><h3 id="方法一-watch" tabindex="-1">方法一，--watch <a class="header-anchor" href="#方法一-watch" aria-label="Permalink to &quot;方法一，--watch&quot;">​</a></h3><p>添加 script 脚本，</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;watch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack --watch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p>使用 watch 脚本执行，之后每次改动文件都会自动重新打包。</p><p>可能不好的地方：</p><ol><li>url 地址协议为 file 协议</li><li>打包后不会自动打开浏览器</li><li>修改文件后需要刷新浏览器</li></ol><h2 id="方法二-webpack-dev-server" tabindex="-1">方法二，webpack-dev-server <a class="header-anchor" href="#方法二-webpack-dev-server" aria-label="Permalink to &quot;方法二，webpack-dev-server&quot;">​</a></h2><p>好处是：</p><ol><li>模拟 web 服务器，地址为 http 开头</li><li>可以配置打包后自动打开浏览器</li><li>修改文件后自动刷新浏览器</li></ol><p>使用。下载。<code>npm install --save-dev webpack-dev-server</code></p><p><strong>然后执行 webpack 脚本的时候加上 serve 参数。</strong></p><p>添加脚本并启动，可以看到自动打开了浏览器并且可以访问。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack serve --open&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div>`,21),p=[l];function n(h,c,o,r,d,k){return e(),s("div",null,p)}const g=a(t,[["render",n]]);export{b as __pageData,g as default};
