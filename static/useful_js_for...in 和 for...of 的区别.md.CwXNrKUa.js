import{_ as s,l as i,k as a,ae as n}from"./chunks/framework.BFFW23Ds.js";const g=JSON.parse('{"title":"for...in 和 for...of 的区别.md","description":"","frontmatter":{"label":"js"},"headers":[{"level":2,"title":"介绍下迭代器","slug":"介绍下迭代器","link":"#介绍下迭代器","children":[]},{"level":2,"title":"for...of","slug":"for-of","link":"#for-of","children":[]},{"level":2,"title":"for...in","slug":"for-in","link":"#for-in","children":[]},{"level":2,"title":"for..fof 和 for...in 语法区别","slug":"for-fof-和-for-in-语法区别","link":"#for-fof-和-for-in-语法区别","children":[]}],"relativePath":"useful/js/for...in 和 for...of 的区别.md","filePath":"useful/js/for...in 和 for...of 的区别.md","lastUpdated":1709816942000}'),l={name:"useful/js/for...in 和 for...of 的区别.md"},e=n(`<h1 id="for-in-和-for-of-的区别-md" tabindex="-1">for...in 和 for...of 的区别.md <a class="header-anchor" href="#for-in-和-for-of-的区别-md" aria-label="Permalink to &quot;for...in 和 for...of 的区别.md&quot;">​</a></h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noreferrer">for...in</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noreferrer">for...of</a></li></ul><h2 id="介绍下迭代器" tabindex="-1">介绍下迭代器 <a class="header-anchor" href="#介绍下迭代器" aria-label="Permalink to &quot;介绍下迭代器&quot;">​</a></h2><p>迭代器的本质就是一个拥有 next 方法的对象，用 next 方法来移动指针。</p><p>next 方法返回一个对象，value 属性值表示返回的值，done 属性值表示是否还要移动指针。</p><p>天生实现迭代器 Symbol.iterator 的对象有<strong>数组</strong>、<strong>字符串</strong>、<strong>Map</strong>、<strong>Set</strong>。</p><p>Object 则没有。</p><p>部署了迭代器的数据，可以用 for...of 遍历。</p><p>只有实现了迭代器 Symbol.iterator 的对象才能使用 for...of 语法。</p><p>可以手动给对象自定义一个迭代器，比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [Symbol.iterator]() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self.data.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            value: self.data[index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            done: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            done: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // hello, world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="for-of" tabindex="-1">for...of <a class="header-anchor" href="#for-of" aria-label="Permalink to &quot;for...of&quot;">​</a></h2><h2 id="for-in" tabindex="-1">for...in <a class="header-anchor" href="#for-in" aria-label="Permalink to &quot;for...in&quot;">​</a></h2><p>注意，for...in 不会遍历 symbol 类型的属性。</p><h2 id="for-fof-和-for-in-语法区别" tabindex="-1">for..fof 和 for...in 语法区别 <a class="header-anchor" href="#for-fof-和-for-in-语法区别" aria-label="Permalink to &quot;for..fof 和 for...in 语法区别&quot;">​</a></h2><p>从字面意思上理解，属性在对象上，也可能不在对象上，in 有在...里的意思，所以 for...in 表示遍历对象的属性名，而不是属性值。xxxObj 的 xx 属性值是 xx，一般说属性值都要说是哪个属性的属性值，而 of 有什么什么的意思，所以 for...of 表示遍历对象的属性值。</p><p>共同点：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>都可以用 break 关键字跳出循环</span></span></code></pre></div><p>不同点：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for...in 遍历的是属性名，for...of 遍历的是属性值</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for...in 会遍历原型，for...of 不会</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for...in 不需要实现迭代器，for...of 需要实现迭代器</span></span></code></pre></div>`,20),t=[e];function p(h,r,k,o,d,E){return a(),i("div",null,t)}const c=s(l,[["render",p]]);export{g as __pageData,c as default};
