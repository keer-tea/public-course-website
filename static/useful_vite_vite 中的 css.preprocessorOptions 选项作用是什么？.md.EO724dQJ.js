import{_ as s,l as i,k as a,ae as n}from"./chunks/framework.BFFW23Ds.js";const g=JSON.parse('{"title":"vite 中的 css.preprocessorOptions 选项作用是什么？","description":"","frontmatter":{"label":"vite"},"headers":[],"relativePath":"useful/vite/vite 中的 css.preprocessorOptions 选项作用是什么？.md","filePath":"useful/vite/vite 中的 css.preprocessorOptions 选项作用是什么？.md","lastUpdated":1709394628000}'),e={name:"useful/vite/vite 中的 css.preprocessorOptions 选项作用是什么？.md"},t=n(`<h1 id="vite-中的-css-preprocessoroptions-选项作用是什么" tabindex="-1">vite 中的 css.preprocessorOptions 选项作用是什么？ <a class="header-anchor" href="#vite-中的-css-preprocessoroptions-选项作用是什么" aria-label="Permalink to &quot;vite 中的 css.preprocessorOptions 选项作用是什么？&quot;">​</a></h1><p>指定传递给 CSS 预处理器的选项。文件扩展名用作选项的键。每个预处理器支持的选项可以在它们各自的文档中找到：</p><ul><li>sass/scss - <a href="https://sass-lang.com/documentation/js-api/interfaces/LegacyStringOptions" target="_blank" rel="noreferrer">选项</a>。</li><li>less - <a href="https://lesscss.org/usage/#less-options" target="_blank" rel="noreferrer">选项</a>。</li><li>styl/stylus - 仅支持 <a href="https://stylus-lang.com/docs/js.html" target="_blank" rel="noreferrer">define</a>，可以作为对象传递。</li></ul><p>所有预处理器选项还支持 additionalData 选项，可以用于为每个样式内容注入额外代码。请注意，如果注入的是实际的样式而不仅仅是变量时，那么这些样式将会在最终的打包产物中重复出现。</p><p>示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  css: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    preprocessorOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scss: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        additionalData: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`$injectedColor: orange;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      less: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        math: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;parens-division&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      styl: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        define: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          $specialColor: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stylus.nodes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGBA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">197</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>其实就像什么呢？就像执行脚本命令时传递一些参数。</p>`,7),p=[t];function l(h,r,k,E,o,c){return a(),i("div",null,p)}const y=s(e,[["render",l]]);export{g as __pageData,y as default};
