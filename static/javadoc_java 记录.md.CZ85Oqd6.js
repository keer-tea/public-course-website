import{_ as s,l as a,k as i,ae as n}from"./chunks/framework.BFFW23Ds.js";const g=JSON.parse('{"title":"java 记录","description":"","frontmatter":{},"headers":[{"level":2,"title":"获取从控制台输入的值","slug":"获取从控制台输入的值","link":"#获取从控制台输入的值","children":[]},{"level":2,"title":"类的构造器前面是否可以加修饰符？","slug":"类的构造器前面是否可以加修饰符","link":"#类的构造器前面是否可以加修饰符","children":[]}],"relativePath":"javadoc/java 记录.md","filePath":"javadoc/java 记录.md","lastUpdated":1709394628000}'),p={name:"javadoc/java 记录.md"},l=n(`<h1 id="java-记录" tabindex="-1">java 记录 <a class="header-anchor" href="#java-记录" aria-label="Permalink to &quot;java 记录&quot;">​</a></h1><h2 id="获取从控制台输入的值" tabindex="-1">获取从控制台输入的值 <a class="header-anchor" href="#获取从控制台输入的值" aria-label="Permalink to &quot;获取从控制台输入的值&quot;">​</a></h2><p>假设你要获取用户在控制台中输入的 int 类型的数字，那么可以这样写：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 首先导入相关的包（IDEA 会自动导入）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UseScanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 2. 创建一个 Scanner 对象实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Scanner input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.in);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入整数~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 3. 获取用户在控制台输入的整数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 4. 关闭 Scanner 对象，防止内存泄漏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="类的构造器前面是否可以加修饰符" tabindex="-1">类的构造器前面是否可以加修饰符？ <a class="header-anchor" href="#类的构造器前面是否可以加修饰符" aria-label="Permalink to &quot;类的构造器前面是否可以加修饰符？&quot;">​</a></h2><p>构造器前面可以加修饰符。但是构造器没有返回值，不能有 return 语句，没有 void 返回值类型。</p><p>构造器的语法如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[修饰符] class 类名{</span></span>
<span class="line"><span>    [修饰符] 构造器名(){</span></span>
<span class="line"><span>        // 实例初始化代码</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    [修饰符] 构造器名(参数列表){</span></span>
<span class="line"><span>        // 实例初始化代码</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,8),t=[l];function e(h,k,r,d,c,E){return i(),a("div",null,t)}const y=s(p,[["render",e]]);export{g as __pageData,y as default};
