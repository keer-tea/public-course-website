import{_ as s,l as i,k as a,ae as n}from"./chunks/framework.BFFW23Ds.js";const g=JSON.parse('{"title":"简单看看 vite 的一点点源码.md","description":"","frontmatter":{},"headers":[{"level":2,"title":"学习的坎坷","slug":"学习的坎坷","link":"#学习的坎坷","children":[]},{"level":2,"title":"明确入口是在哪里","slug":"明确入口是在哪里","link":"#明确入口是在哪里","children":[]},{"level":2,"title":"准备调试","slug":"准备调试","link":"#准备调试","children":[]},{"level":2,"title":"调试","slug":"调试","link":"#调试","children":[]},{"level":2,"title":"了解到 cac 依赖库","slug":"了解到-cac-依赖库","link":"#了解到-cac-依赖库","children":[]},{"level":2,"title":"vite 是如何获取 version 的？","slug":"vite-是如何获取-version-的","link":"#vite-是如何获取-version-的","children":[]},{"level":2,"title":"到此为止","slug":"到此为止","link":"#到此为止","children":[]}],"relativePath":"useful/vite/简单看看 vite 的一点点源码.md","filePath":"useful/vite/简单看看 vite 的一点点源码.md","lastUpdated":1709394628000}'),t={name:"useful/vite/简单看看 vite 的一点点源码.md"},l=n(`<h1 id="简单看看-vite-的一点点源码-md" tabindex="-1">简单看看 vite 的一点点源码.md <a class="header-anchor" href="#简单看看-vite-的一点点源码-md" aria-label="Permalink to &quot;简单看看 vite 的一点点源码.md&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>vite 版本：5.0.9</p></div><h2 id="学习的坎坷" tabindex="-1">学习的坎坷 <a class="header-anchor" href="#学习的坎坷" aria-label="Permalink to &quot;学习的坎坷&quot;">​</a></h2><p>不得不说，中国人想要学习先进的知识实在是坎坷了。想在 github 下载个著名的开源仓库，网速满得跟乌龟似的，下了一点点就报错了。好不容易从 gitee 上下载好，下载依赖又遇到问题。从镜像下载依赖有些是没有的，只能把相应的暂时用不到的依赖给删除掉重下。</p><p>我觉得这几步可能就劝退一些人了吧。</p><h2 id="明确入口是在哪里" tabindex="-1">明确入口是在哪里 <a class="header-anchor" href="#明确入口是在哪里" aria-label="Permalink to &quot;明确入口是在哪里&quot;">​</a></h2><p>我们在 vite 仓库下载好依赖后，接下来该怎么做呢？我们平时使用 vite 就是执行它的命令，比如：<code>vite</code>、<code>vite serve</code>、<code>vite build</code>。</p><p>为什么我们能使用这个 <code>vite</code> 命令呢？原因是在 <code>\\vite\\packages\\vite\\package.json</code> 中定义了 <code>bin</code> 字段。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bin/vite.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>所以我们执行 <code>vite</code> 命令时，其实执行的是 bin/vite.js 这个文件。所以我们就在 bin/vite.js 中打上断点，进行调试。</p><h2 id="准备调试" tabindex="-1">准备调试 <a class="header-anchor" href="#准备调试" aria-label="Permalink to &quot;准备调试&quot;">​</a></h2><p>如何使用 vscode 调试 js 文件？点击 vscode 左侧的一条工具栏中的 Run and Debug 按钮，添加一个配置，然后就可以启动调试了。调试前记得先在某行代码前面打上断点，这样程序才会停在那里。</p><p>添加调试配置时会自动创建 .vscode/launch.json 文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Use IntelliSense to learn about possible attributes.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Hover to view descriptions of existing attributes.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;launch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Launch Program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;skipFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&lt;node_internals&gt;/**&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${workspaceFolder}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packages</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vite</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vite.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后我们打上断点，一步步执行。发现很多代码都都看不懂。但其实影响也不是特别大，因为我们看源码的目的是：</p><ol><li>启发我们平时编码</li><li>了解一些有用的依赖，工具</li><li>锻炼思维</li><li>帮助我们更熟悉、理解 vite</li></ol><p>当然目的不止这些。除此之外多说一句，从经验上看，像弄懂全部源码就是痴人说梦。</p><h2 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h2><p>开始调试后，如果我们没有做什么特别的操作，那么最后一定会走进这个函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../dist/node/cli.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>看来是去执行 dist/node/cli.js 文件了。这个文件需要经过打包才会生成在 dist 目录。继续断点，发现不会往下走了。于是乎，我们修改下 launch.json 文件，开始调试 dist/node/cli.js 文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Use IntelliSense to learn about possible attributes.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Hover to view descriptions of existing attributes.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;launch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Launch Program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;skipFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&lt;node_internals&gt;/**&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line diff remove"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${workspaceFolder}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packages</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vite</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vite.js&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${workspaceFolder}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packages</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vite</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dist</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cli.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="了解到-cac-依赖库" tabindex="-1">了解到 cac 依赖库 <a class="header-anchor" href="#了解到-cac-依赖库" aria-label="Permalink to &quot;了解到 cac 依赖库&quot;">​</a></h2><p>然后，我们就会发现有许多这样的代码：</p><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/vite/Snipaste_2023-12-15_01-31-30.png"><img src="https://my-course-public.oss-cn-shanghai.aliyuncs.com/public/assets/vite/Snipaste_2023-12-15_01-33-11.png"><p>这时候我们大概会想知道这个 cli 是什么东西。我们如果多看两眼，会发现一些有点熟悉的东西，像 serve、dev、preview 这些单词，不就是我们经常执行 vite 命令 <code>vite serve</code>、<code>vite dev</code>、<code>vite preview</code> 所遇到的嘛。</p><p>通过查找变量来源，知道了一个叫做 cac 的库。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { cac } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cac&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cli</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>这个库可以获取用户在控制台中输入的命令，然后根据这些命令进行一些操作。或者说，这个库让人可以通过控制台与程序进行交互。</p><p>我们可以再详细看看 cac 的文档，然后再看看它在 vite 中是怎么使用的。</p><h2 id="vite-是如何获取-version-的" tabindex="-1">vite 是如何获取 version 的？ <a class="header-anchor" href="#vite-是如何获取-version-的" aria-label="Permalink to &quot;vite 是如何获取 version 的？&quot;">​</a></h2><p>在这个文件中，如果我们点进去下面的代码，还可以学到 vite 是如何获取 package.json 中的 version 字段。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// VERSION 的值与 package.json 中的 version 字段的值相同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="到此为止" tabindex="-1">到此为止 <a class="header-anchor" href="#到此为止" aria-label="Permalink to &quot;到此为止&quot;">​</a></h2><p>ok，源码看到这里就差不多了。本篇文章真的是简单的看看 vite 的一点点源码，超级浅尝辄止。希望以后能更进一步，了解更多关于 vite 的源码。</p>`,36),e=[l];function h(p,k,d,r,o,E){return a(),i("div",null,e)}const F=s(t,[["render",h]]);export{g as __pageData,F as default};
