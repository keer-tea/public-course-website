import{_ as s,l as i,k as a,ae as l}from"./chunks/framework.BFFW23Ds.js";const g=JSON.parse('{"title":"vue-cli 项目的浏览器兼容性","description":"","frontmatter":{"label":["vue","vue-cli"]},"headers":[{"level":2,"title":"一些疑问","slug":"一些疑问","link":"#一些疑问","children":[]},{"level":2,"title":"browserslist","slug":"browserslist","link":"#browserslist","children":[]},{"level":2,"title":"polyfill 垫片","slug":"polyfill-垫片","link":"#polyfill-垫片","children":[{"level":3,"title":"选择一","slug":"选择一","link":"#选择一","children":[]},{"level":3,"title":"选择二","slug":"选择二","link":"#选择二","children":[]},{"level":3,"title":"选择三","slug":"选择三","link":"#选择三","children":[]}]},{"level":2,"title":"构建库或是 Web Component 时的 Polyfills","slug":"构建库或是-web-component-时的-polyfills","link":"#构建库或是-web-component-时的-polyfills","children":[]}],"relativePath":"useful/vue-cli/vue-cli 项目的浏览器兼容性.md","filePath":"useful/vue-cli/vue-cli 项目的浏览器兼容性.md","lastUpdated":1709394628000}'),e={name:"useful/vue-cli/vue-cli 项目的浏览器兼容性.md"},n=l(`<h1 id="vue-cli-项目的浏览器兼容性" tabindex="-1">vue-cli 项目的浏览器兼容性 <a class="header-anchor" href="#vue-cli-项目的浏览器兼容性" aria-label="Permalink to &quot;vue-cli 项目的浏览器兼容性&quot;">​</a></h1><h2 id="一些疑问" tabindex="-1">一些疑问 <a class="header-anchor" href="#一些疑问" aria-label="Permalink to &quot;一些疑问&quot;">​</a></h2><ol><li>为什么 vue-cli 创建的项目打包后文件里依然存在 const、let 这些语法，并没有被转换为 var？</li></ol><p>因为目标浏览器兼容 const、let 语法，没有必要转换。</p><ol start="2"><li>如何检测 vue-cli 项目的兼容性？</li></ol><p>可以下载一个猎豹浏览器，然后项目里使用一些最新的 ES6 语法，比如 <code>??</code>、<code>?.</code>。 当 .browserslistrc 的内容为不同值时，猎豹浏览器会有不同的表现。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 猎豹浏览器会报错</span></span>
<span class="line"><span>chrome 119</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 猎豹浏览器不会报错</span></span>
<span class="line"><span>chrome 45</span></span></code></pre></div><h2 id="browserslist" tabindex="-1">browserslist <a class="header-anchor" href="#browserslist" aria-label="Permalink to &quot;browserslist&quot;">​</a></h2><p>vue-cli 创建的项目的 package.json 中有 browserslist 字段，或则是一个单独的 .browserslistrc 文件。它们指定了项目代码兼容浏览器的范围。这个值会被 <a href="https://babeljs.io/docs/babel-preset-env.html#usebuiltins-usage" target="_blank" rel="noreferrer">@babel/preset-env</a> 和 <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noreferrer">Autoprefixer</a> 用来确定需要转译的 JavaScript 特性和需要添加的 CSS 浏览器前缀。</p><p>如何指定浏览器范围呢？<a href="https://github.com/browserslist/browserslist" target="_blank" rel="noreferrer">点这里</a>。</p><h2 id="polyfill-垫片" tabindex="-1">polyfill 垫片 <a class="header-anchor" href="#polyfill-垫片" aria-label="Permalink to &quot;polyfill 垫片&quot;">​</a></h2><p>一个默认的 vue-cli 项目使用 <a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/babel-preset-app" target="_blank" rel="noreferrer">@vue/babel-preset-app</a>，它通过 @babel/preset-env 和 browserslist 配置来决定项目需要的 polyfill。</p><p>默认情况下，它（vue-cli）会把 useBuiltIns: &#39;usage&#39; 传递给 @babel/preset-env，这样它会根据源代码中出现的语言特性自动检测需要的 polyfill。这确保了最终包里 polyfill 数量的最小化。<strong>然而，这也意味着如果其中一个依赖需要特殊的 polyfill，默认情况下 Babel 无法将其检测出来。</strong></p><p>如果有依赖需要 polyfill，你有几种选择：</p><h3 id="选择一" tabindex="-1">选择一 <a class="header-anchor" href="#选择一" aria-label="Permalink to &quot;选择一&quot;">​</a></h3><p>如果该依赖具有我们目标环境不支持的 es6 代码。可以将这个依赖添加到 vue.config.js 中的 transpileDependencies 选项，这会为该依赖同时开启语法转换和根据使用情况检测 polyfill。</p><h3 id="选择二" tabindex="-1">选择二 <a class="header-anchor" href="#选择二" aria-label="Permalink to &quot;选择二&quot;">​</a></h3><p>如果该依赖式地列出了需要的 polyfill。你可以使用 @vue/babel-preset-app 的 polyfills 选项预包含所需要的 polyfill。注意 es.promise 将被默认包含，因为现在的库依赖 Promise 是非常普遍的。</p><p>我们推荐以这种方式添加 polyfill 而不是在源代码中直接导入它们，因为如果这里列出的 polyfill 在 browserslist 的目标中不需要，则它会被自动排除。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// babel.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  presets: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@vue/app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      polyfills: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;es.promise&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;es.symbol&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这里，&#39;@vue/app&#39; 是 &#39;@vue/babel-preset-app&#39; 的缩写。在我们自己用 vue-cli 创建项目时，却发现 babel.config.js 长这样：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  presets: [</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;@vue/cli-plugin-babel/preset&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用的是 &#39;@vue/cli-plugin-babel/preset&#39; 而不是 &#39;@vue/app&#39;。其实看看源码就知道，他们两完全是同一个东西。</p><p>&#39;@vue/cli-plugin-babel/preset&#39; 原封不动的引用然后导出了 &#39;@vue/app&#39;。</p><p>@vue/cli-plugin-babel/preset.js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@vue/babel-preset-app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="选择三" tabindex="-1">选择三 <a class="header-anchor" href="#选择三" aria-label="Permalink to &quot;选择三&quot;">​</a></h3><p>使用 useBuiltIns: &#39;entry&#39;，然后在入口文件添加 <code>import &#39;core-js/stable&#39;; import &#39;regenerator-runtime/runtime&#39;;</code>。这会根据 browserslist 目标导入所有 polyfill，这样你就不用再担心依赖的 polyfill 问题了，但是因为包含了一些没有用到的 polyfill 所以最终的包大小可能会增加。</p><h2 id="构建库或是-web-component-时的-polyfills" tabindex="-1">构建库或是 Web Component 时的 Polyfills <a class="header-anchor" href="#构建库或是-web-component-时的-polyfills" aria-label="Permalink to &quot;构建库或是 Web Component 时的 Polyfills&quot;">​</a></h2><p>当使用 Vue CLI 来构建一个库或是 Web Component 时，推荐给 @vue/babel-preset-app 传入 useBuiltIns: false 选项。这能够确保你的库或是组件不包含不必要的 polyfills。通常来说，<strong>打包 polyfills 应当是最终使用你的库的应用的责任</strong>。</p>`,31),p=[n];function t(h,r,k,o,d,c){return a(),i("div",null,p)}const u=s(e,[["render",t]]);export{g as __pageData,u as default};
